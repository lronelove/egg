{"id":"..\\node_modules\\ramda\\es\\reduceWhile.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curryN","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\reduceWhile.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curryN.js"},{"name":"./internal/_reduce","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\reduceWhile.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_reduce.js"},{"name":"./internal/_reduced","loc":{"line":3,"column":21},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\reduceWhile.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_reduced.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curryN2 = require('./internal/_curryN');\n\nvar _curryN3 = _interopRequireDefault(_curryN2);\n\nvar _reduce2 = require('./internal/_reduce');\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _reduced2 = require('./internal/_reduced');\n\nvar _reduced3 = _interopRequireDefault(_reduced2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator.\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      var isOdd = (acc, x) => x % 2 === 1;\n *      var xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      var ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nvar reduceWhile = /*#__PURE__*/(0, _curryN3.default)(4, [], function _reduceWhile(pred, fn, a, list) {\n  return (0, _reduce3.default)(function (acc, x) {\n    return pred(acc, x) ? fn(acc, x) : (0, _reduced3.default)(acc);\n  }, a, list);\n});\nexports.default = reduceWhile;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":5,"column":0}},{"generated":{"line":50,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":0}},{"name":"reduceWhile","generated":{"line":50,"column":4},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":4}},{"generated":{"line":50,"column":18},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":18}},{"generated":{"line":50,"column":31},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":31}},{"generated":{"line":50,"column":53},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":39}},{"generated":{"line":50,"column":54},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":31}},{"generated":{"line":50,"column":56},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":42}},{"generated":{"line":50,"column":58},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":31}},{"generated":{"line":50,"column":60},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":46}},{"name":"_reduceWhile","generated":{"line":50,"column":69},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":55}},{"generated":{"line":50,"column":81},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":46}},{"name":"pred","generated":{"line":50,"column":82},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":68}},{"generated":{"line":50,"column":86},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":46}},{"name":"fn","generated":{"line":50,"column":88},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":74}},{"generated":{"line":50,"column":90},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":46}},{"name":"a","generated":{"line":50,"column":92},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":78}},{"generated":{"line":50,"column":93},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":46}},{"name":"list","generated":{"line":50,"column":95},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":81}},{"generated":{"line":50,"column":99},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":46}},{"generated":{"line":50,"column":101},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":87}},{"generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":2}},{"generated":{"line":51,"column":9},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":9}},{"generated":{"line":51,"column":31},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":17}},{"name":"acc","generated":{"line":51,"column":41},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":27}},{"generated":{"line":51,"column":44},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":17}},{"name":"x","generated":{"line":51,"column":46},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":32}},{"generated":{"line":51,"column":47},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":17}},{"generated":{"line":51,"column":49},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":35}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":4}},{"name":"pred","generated":{"line":52,"column":11},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":11}},{"name":"acc","generated":{"line":52,"column":16},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":16}},{"generated":{"line":52,"column":19},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":11}},{"name":"x","generated":{"line":52,"column":21},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":21}},{"generated":{"line":52,"column":22},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":11}},{"name":"fn","generated":{"line":52,"column":26},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":26}},{"name":"acc","generated":{"line":52,"column":29},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":29}},{"generated":{"line":52,"column":32},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":26}},{"name":"x","generated":{"line":52,"column":34},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":34}},{"generated":{"line":52,"column":35},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":26}},{"generated":{"line":52,"column":36},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":11}},{"generated":{"line":52,"column":39},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":39}},{"name":"acc","generated":{"line":52,"column":62},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":48}},{"generated":{"line":52,"column":65},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":39}},{"generated":{"line":52,"column":66},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":36,"column":4}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":37,"column":3}},{"generated":{"line":53,"column":3},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":9}},{"name":"a","generated":{"line":53,"column":5},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":37,"column":5}},{"generated":{"line":53,"column":6},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":9}},{"name":"list","generated":{"line":53,"column":8},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":37,"column":8}},{"generated":{"line":53,"column":12},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":9}},{"generated":{"line":53,"column":13},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":35,"column":2}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":38,"column":1}},{"generated":{"line":54,"column":1},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":31}},{"generated":{"line":54,"column":2},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":34,"column":0}},{"name":"reduceWhile","generated":{"line":55,"column":18},"source":"..\\node_modules\\ramda\\es\\reduceWhile.js","original":{"line":39,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\reduceWhile.js":"import _curryN from './internal/_curryN';\nimport _reduce from './internal/_reduce';\nimport _reduced from './internal/_reduced';\n\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator.\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      var isOdd = (acc, x) => x % 2 === 1;\n *      var xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      var ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nvar reduceWhile = /*#__PURE__*/_curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  return _reduce(function (acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  }, a, list);\n});\nexport default reduceWhile;"},"lineCount":null}},"hash":"ea7fdf64eb4cda9af328d3ea74b83619","cacheData":{"env":{}}}