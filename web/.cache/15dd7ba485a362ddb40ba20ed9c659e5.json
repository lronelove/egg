{"id":"..\\node_modules\\ramda\\es\\into.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./internal/_clone","loc":{"line":1,"column":19},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\into.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_clone.js"},{"name":"./internal/_curry3","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\into.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry3.js"},{"name":"./internal/_isTransformer","loc":{"line":3,"column":27},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\into.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_isTransformer.js"},{"name":"./internal/_reduce","loc":{"line":4,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\into.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_reduce.js"},{"name":"./internal/_stepCat","loc":{"line":5,"column":21},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\into.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_stepCat.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _clone2 = require('./internal/_clone');\n\nvar _clone3 = _interopRequireDefault(_clone2);\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _isTransformer2 = require('./internal/_isTransformer');\n\nvar _isTransformer3 = _interopRequireDefault(_isTransformer2);\n\nvar _reduce2 = require('./internal/_reduce');\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _stepCat2 = require('./internal/_stepCat');\n\nvar _stepCat3 = _interopRequireDefault(_stepCat2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nvar into = /*#__PURE__*/(0, _curry2.default)(function into(acc, xf, list) {\n  return (0, _isTransformer3.default)(acc) ? (0, _reduce3.default)(xf(acc), acc['@@transducer/init'](), list) : (0, _reduce3.default)(xf((0, _stepCat3.default)(acc)), (0, _clone3.default)(acc, [], [], false), list);\n});\nexports.default = into;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":4,"column":0}},{"generated":{"line":23,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":5,"column":0}},{"generated":{"line":29,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":7,"column":0}},{"generated":{"line":67,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":0}},{"name":"into","generated":{"line":67,"column":4},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":4}},{"generated":{"line":67,"column":11},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":11}},{"generated":{"line":67,"column":24},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":24}},{"generated":{"line":67,"column":45},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":32}},{"name":"into","generated":{"line":67,"column":54},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":41}},{"generated":{"line":67,"column":58},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":32}},{"name":"acc","generated":{"line":67,"column":59},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":46}},{"generated":{"line":67,"column":62},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":32}},{"name":"xf","generated":{"line":67,"column":64},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":51}},{"generated":{"line":67,"column":66},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":32}},{"name":"list","generated":{"line":67,"column":68},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":55}},{"generated":{"line":67,"column":72},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":32}},{"generated":{"line":67,"column":74},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":61}},{"generated":{"line":68,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":2}},{"generated":{"line":68,"column":9},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":9}},{"name":"acc","generated":{"line":68,"column":38},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":24}},{"generated":{"line":68,"column":41},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":9}},{"generated":{"line":68,"column":45},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":31}},{"name":"xf","generated":{"line":68,"column":67},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":39}},{"name":"acc","generated":{"line":68,"column":70},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":42}},{"generated":{"line":68,"column":73},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":39}},{"generated":{"line":68,"column":74},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":31}},{"name":"acc","generated":{"line":68,"column":76},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":48}},{"generated":{"line":68,"column":80},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":52}},{"generated":{"line":68,"column":99},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":48}},{"generated":{"line":68,"column":102},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":31}},{"name":"list","generated":{"line":68,"column":104},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":76}},{"generated":{"line":68,"column":108},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":31}},{"generated":{"line":68,"column":109},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":9}},{"generated":{"line":68,"column":112},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":84}},{"name":"xf","generated":{"line":68,"column":134},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":92}},{"generated":{"line":68,"column":137},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":95}},{"name":"acc","generated":{"line":68,"column":160},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":104}},{"generated":{"line":68,"column":163},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":95}},{"generated":{"line":68,"column":164},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":92}},{"generated":{"line":68,"column":165},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":84}},{"generated":{"line":68,"column":167},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":111}},{"name":"acc","generated":{"line":68,"column":188},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":118}},{"generated":{"line":68,"column":191},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":111}},{"generated":{"line":68,"column":193},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":123}},{"generated":{"line":68,"column":195},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":111}},{"generated":{"line":68,"column":197},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":127}},{"generated":{"line":68,"column":199},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":111}},{"generated":{"line":68,"column":201},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":131}},{"generated":{"line":68,"column":206},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":111}},{"generated":{"line":68,"column":207},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":84}},{"name":"list","generated":{"line":68,"column":209},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":139}},{"generated":{"line":68,"column":213},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":84}},{"generated":{"line":68,"column":214},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":46,"column":2}},{"generated":{"line":69,"column":0},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":47,"column":1}},{"generated":{"line":69,"column":1},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":24}},{"generated":{"line":69,"column":2},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":45,"column":0}},{"name":"into","generated":{"line":70,"column":18},"source":"..\\node_modules\\ramda\\es\\into.js","original":{"line":48,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\into.js":"import _clone from './internal/_clone';\nimport _curry3 from './internal/_curry3';\nimport _isTransformer from './internal/_isTransformer';\nimport _reduce from './internal/_reduce';\nimport _stepCat from './internal/_stepCat';\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nvar into = /*#__PURE__*/_curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\nexport default into;"},"lineCount":null}},"hash":"04006d710f1373d685d1592b36cf1649","cacheData":{"env":{}}}