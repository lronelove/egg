{"id":"..\\node_modules\\ramda\\es\\eqBy.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\eqBy.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry3.js"},{"name":"./equals","loc":{"line":2,"column":19},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\eqBy.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\equals.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _equals = require('./equals');\n\nvar _equals2 = _interopRequireDefault(_equals);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nvar eqBy = /*#__PURE__*/(0, _curry2.default)(function eqBy(f, x, y) {\n  return (0, _equals2.default)(f(x), f(y));\n});\nexports.default = eqBy;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":4,"column":0}},{"generated":{"line":34,"column":0},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":0}},{"name":"eqBy","generated":{"line":34,"column":4},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":4}},{"generated":{"line":34,"column":11},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":11}},{"generated":{"line":34,"column":24},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":24}},{"generated":{"line":34,"column":45},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":32}},{"name":"eqBy","generated":{"line":34,"column":54},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":41}},{"generated":{"line":34,"column":58},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":32}},{"name":"f","generated":{"line":34,"column":59},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":46}},{"generated":{"line":34,"column":60},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":32}},{"name":"x","generated":{"line":34,"column":62},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":49}},{"generated":{"line":34,"column":63},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":32}},{"name":"y","generated":{"line":34,"column":65},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":52}},{"generated":{"line":34,"column":66},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":32}},{"generated":{"line":34,"column":68},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":55}},{"generated":{"line":35,"column":0},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":2}},{"generated":{"line":35,"column":9},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":9}},{"name":"f","generated":{"line":35,"column":31},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":16}},{"name":"x","generated":{"line":35,"column":33},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":18}},{"generated":{"line":35,"column":34},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":16}},{"generated":{"line":35,"column":35},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":9}},{"name":"f","generated":{"line":35,"column":37},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":22}},{"name":"y","generated":{"line":35,"column":39},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":24}},{"generated":{"line":35,"column":40},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":22}},{"generated":{"line":35,"column":41},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":9}},{"generated":{"line":35,"column":42},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":22,"column":2}},{"generated":{"line":36,"column":0},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":23,"column":1}},{"generated":{"line":36,"column":1},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":24}},{"generated":{"line":36,"column":2},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":21,"column":0}},{"name":"eqBy","generated":{"line":37,"column":18},"source":"..\\node_modules\\ramda\\es\\eqBy.js","original":{"line":24,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\eqBy.js":"import _curry3 from './internal/_curry3';\nimport equals from './equals';\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nvar eqBy = /*#__PURE__*/_curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\nexport default eqBy;"},"lineCount":null}},"hash":"4f5bf23d690e3eb4257af8b8ac7b000a","cacheData":{"env":{}}}