{"id":"..\\node_modules\\ramda\\es\\clamp.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\clamp.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry3.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nvar clamp = /*#__PURE__*/(0, _curry2.default)(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min ? min : value > max ? max : value;\n});\nexports.default = clamp;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":3,"column":0}},{"generated":{"line":33,"column":0},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":0}},{"name":"clamp","generated":{"line":33,"column":4},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":4}},{"generated":{"line":33,"column":12},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":12}},{"generated":{"line":33,"column":25},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":25}},{"generated":{"line":33,"column":46},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":33}},{"name":"clamp","generated":{"line":33,"column":55},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":42}},{"generated":{"line":33,"column":60},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":33}},{"name":"min","generated":{"line":33,"column":61},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":48}},{"generated":{"line":33,"column":64},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":33}},{"name":"max","generated":{"line":33,"column":66},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":53}},{"generated":{"line":33,"column":69},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":33}},{"name":"value","generated":{"line":33,"column":71},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":58}},{"generated":{"line":33,"column":76},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":33}},{"generated":{"line":33,"column":78},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":65}},{"generated":{"line":34,"column":0},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":24,"column":2}},{"name":"min","generated":{"line":34,"column":6},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":24,"column":6}},{"name":"max","generated":{"line":34,"column":12},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":24,"column":12}},{"generated":{"line":34,"column":15},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":24,"column":2}},{"generated":{"line":34,"column":17},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":24,"column":17}},{"generated":{"line":35,"column":0},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":25,"column":4}},{"generated":{"line":35,"column":10},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":25,"column":10}},{"name":"Error","generated":{"line":35,"column":14},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":25,"column":14}},{"generated":{"line":35,"column":19},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":25,"column":10}},{"generated":{"line":35,"column":20},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":25,"column":20}},{"generated":{"line":35,"column":80},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":25,"column":10}},{"generated":{"line":35,"column":81},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":25,"column":4}},{"generated":{"line":36,"column":0},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":26,"column":3}},{"generated":{"line":37,"column":0},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":2}},{"name":"value","generated":{"line":37,"column":9},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":9}},{"name":"min","generated":{"line":37,"column":17},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":17}},{"generated":{"line":37,"column":20},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":9}},{"name":"min","generated":{"line":37,"column":23},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":23}},{"generated":{"line":37,"column":26},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":9}},{"name":"value","generated":{"line":37,"column":29},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":29}},{"name":"max","generated":{"line":37,"column":37},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":37}},{"generated":{"line":37,"column":40},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":29}},{"name":"max","generated":{"line":37,"column":43},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":43}},{"generated":{"line":37,"column":46},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":29}},{"name":"value","generated":{"line":37,"column":49},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":49}},{"generated":{"line":37,"column":54},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":27,"column":2}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":28,"column":1}},{"generated":{"line":38,"column":1},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":25}},{"generated":{"line":38,"column":2},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":23,"column":0}},{"name":"clamp","generated":{"line":39,"column":18},"source":"..\\node_modules\\ramda\\es\\clamp.js","original":{"line":29,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\clamp.js":"import _curry3 from './internal/_curry3';\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nvar clamp = /*#__PURE__*/_curry3(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min ? min : value > max ? max : value;\n});\nexport default clamp;"},"lineCount":null}},"hash":"cef61f5a96c90332d7f22e7da861a0c3","cacheData":{"env":{}}}