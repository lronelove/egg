{"id":"..\\node_modules\\ramda\\es\\forEach.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./internal/_checkForMethod","loc":{"line":1,"column":28},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\forEach.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_checkForMethod.js"},{"name":"./internal/_curry2","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\forEach.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry2.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _checkForMethod2 = require('./internal/_checkForMethod');\n\nvar _checkForMethod3 = _interopRequireDefault(_checkForMethod2);\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _checkForMethod3.default)('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\nexports.default = forEach;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":4,"column":0}},{"generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":0}},{"name":"forEach","generated":{"line":51,"column":4},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":4}},{"generated":{"line":51,"column":14},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":14}},{"generated":{"line":51,"column":27},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":27}},{"generated":{"line":51,"column":49},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":36}},{"generated":{"line":51,"column":62},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":49}},{"generated":{"line":51,"column":92},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":65}},{"generated":{"line":51,"column":101},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":49}},{"generated":{"line":51,"column":103},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":76}},{"name":"forEach","generated":{"line":51,"column":112},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":85}},{"generated":{"line":51,"column":119},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":76}},{"name":"fn","generated":{"line":51,"column":120},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":93}},{"generated":{"line":51,"column":122},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":76}},{"name":"list","generated":{"line":51,"column":124},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":97}},{"generated":{"line":51,"column":128},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":76}},{"generated":{"line":51,"column":130},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":103}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":39,"column":2}},{"name":"len","generated":{"line":52,"column":6},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":39,"column":6}},{"name":"list","generated":{"line":52,"column":12},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":39,"column":12}},{"name":"length","generated":{"line":52,"column":17},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":39,"column":17}},{"generated":{"line":52,"column":23},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":39,"column":2}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":40,"column":2}},{"name":"idx","generated":{"line":53,"column":6},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":40,"column":6}},{"generated":{"line":53,"column":12},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":40,"column":12}},{"generated":{"line":53,"column":13},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":40,"column":2}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":41,"column":2}},{"name":"idx","generated":{"line":54,"column":9},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":41,"column":9}},{"name":"len","generated":{"line":54,"column":15},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":41,"column":15}},{"generated":{"line":54,"column":18},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":41,"column":2}},{"generated":{"line":54,"column":20},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":41,"column":20}},{"name":"fn","generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":42,"column":4}},{"name":"list","generated":{"line":55,"column":7},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":42,"column":7}},{"name":"idx","generated":{"line":55,"column":12},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":42,"column":12}},{"generated":{"line":55,"column":15},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":42,"column":7}},{"generated":{"line":55,"column":16},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":42,"column":4}},{"name":"idx","generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":43,"column":4}},{"generated":{"line":56,"column":11},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":43,"column":11}},{"generated":{"line":56,"column":12},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":43,"column":4}},{"generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":44,"column":3}},{"generated":{"line":58,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":45,"column":2}},{"name":"list","generated":{"line":58,"column":9},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":45,"column":9}},{"generated":{"line":58,"column":13},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":45,"column":2}},{"generated":{"line":59,"column":0},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":46,"column":1}},{"generated":{"line":59,"column":1},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":49}},{"generated":{"line":59,"column":2},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":27}},{"generated":{"line":59,"column":3},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":38,"column":0}},{"name":"forEach","generated":{"line":60,"column":18},"source":"..\\node_modules\\ramda\\es\\forEach.js","original":{"line":47,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\forEach.js":"import _checkForMethod from './internal/_checkForMethod';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\nexport default forEach;"},"lineCount":null}},"hash":"a9e8391c615417a7b30564371123d57b","cacheData":{"env":{}}}