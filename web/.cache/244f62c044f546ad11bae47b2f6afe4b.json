{"id":"..\\node_modules\\ramda\\es\\compose.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./pipe","loc":{"line":1,"column":17},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\compose.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\pipe.js"},{"name":"./reverse","loc":{"line":2,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\compose.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\reverse.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = compose;\n\nvar _pipe = require('./pipe');\n\nvar _pipe2 = _interopRequireDefault(_pipe);\n\nvar _reverse = require('./reverse');\n\nvar _reverse2 = _interopRequireDefault(_reverse);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nfunction compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return _pipe2.default.apply(this, (0, _reverse2.default)(arguments));\n}","map":{"mappings":[{"name":"compose","generated":{"line":6,"column":18},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":28,"column":24}},{"generated":{"line":8,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":2,"column":0}},{"generated":{"line":18,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":4,"column":0}},{"generated":{"line":42,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":28,"column":15}},{"name":"compose","generated":{"line":42,"column":9},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":28,"column":24}},{"generated":{"line":42,"column":16},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":28,"column":15}},{"generated":{"line":42,"column":19},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":28,"column":34}},{"generated":{"line":43,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":29,"column":2}},{"name":"arguments","generated":{"line":43,"column":6},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":29,"column":6}},{"name":"length","generated":{"line":43,"column":16},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":29,"column":16}},{"generated":{"line":43,"column":22},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":29,"column":6}},{"generated":{"line":43,"column":27},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":29,"column":27}},{"generated":{"line":43,"column":28},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":29,"column":2}},{"generated":{"line":43,"column":30},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":29,"column":30}},{"generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":30,"column":4}},{"generated":{"line":44,"column":10},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":30,"column":10}},{"name":"Error","generated":{"line":44,"column":14},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":30,"column":14}},{"generated":{"line":44,"column":19},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":30,"column":10}},{"generated":{"line":44,"column":20},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":30,"column":20}},{"generated":{"line":44,"column":60},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":30,"column":10}},{"generated":{"line":44,"column":61},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":30,"column":4}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":31,"column":3}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":2}},{"name":"pipe","generated":{"line":46,"column":9},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":9}},{"name":"apply","generated":{"line":46,"column":24},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":14}},{"generated":{"line":46,"column":29},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":9}},{"generated":{"line":46,"column":30},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":20}},{"generated":{"line":46,"column":34},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":9}},{"generated":{"line":46,"column":36},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":26}},{"name":"arguments","generated":{"line":46,"column":59},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":34}},{"generated":{"line":46,"column":68},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":26}},{"generated":{"line":46,"column":69},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":9}},{"generated":{"line":46,"column":70},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":32,"column":2}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\compose.js","original":{"line":33,"column":1}}],"sources":{"..\\node_modules\\ramda\\es\\compose.js":"import pipe from './pipe';\nimport reverse from './reverse';\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nexport default function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n}"},"lineCount":null}},"hash":"340061013ed03a4c478213d6425b1c9c","cacheData":{"env":{}}}