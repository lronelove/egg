{"id":"..\\node_modules\\ramda\\es\\chain.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\chain.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./internal/_dispatchable","loc":{"line":2,"column":26},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\chain.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_dispatchable.js"},{"name":"./internal/_makeFlat","loc":{"line":3,"column":22},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\chain.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_makeFlat.js"},{"name":"./internal/_xchain","loc":{"line":4,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\chain.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_xchain.js"},{"name":"./map","loc":{"line":5,"column":16},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\chain.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\map.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _dispatchable2 = require('./internal/_dispatchable');\n\nvar _dispatchable3 = _interopRequireDefault(_dispatchable2);\n\nvar _makeFlat2 = require('./internal/_makeFlat');\n\nvar _makeFlat3 = _interopRequireDefault(_makeFlat2);\n\nvar _xchain2 = require('./internal/_xchain');\n\nvar _xchain3 = _interopRequireDefault(_xchain2);\n\nvar _map = require('./map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['fantasy-land/chain', 'chain'], _xchain3.default, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n  return (0, _makeFlat3.default)(false)((0, _map2.default)(fn, monad));\n}));\nexports.default = chain;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":4,"column":0}},{"generated":{"line":23,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":5,"column":0}},{"generated":{"line":29,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":7,"column":0}},{"generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":0}},{"name":"chain","generated":{"line":51,"column":4},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":4}},{"generated":{"line":51,"column":12},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":12}},{"generated":{"line":51,"column":25},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":25}},{"generated":{"line":51,"column":47},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":34}},{"generated":{"line":51,"column":60},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":47}},{"generated":{"line":51,"column":88},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":61}},{"generated":{"line":51,"column":89},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":62}},{"generated":{"line":51,"column":109},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":61}},{"generated":{"line":51,"column":111},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":84}},{"generated":{"line":51,"column":118},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":61}},{"generated":{"line":51,"column":119},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":47}},{"name":"_xchain","generated":{"line":51,"column":121},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":94}},{"generated":{"line":51,"column":137},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":47}},{"generated":{"line":51,"column":139},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":103}},{"name":"chain","generated":{"line":51,"column":148},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":112}},{"generated":{"line":51,"column":153},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":103}},{"name":"fn","generated":{"line":51,"column":154},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":118}},{"generated":{"line":51,"column":156},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":103}},{"name":"monad","generated":{"line":51,"column":158},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":122}},{"generated":{"line":51,"column":163},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":103}},{"generated":{"line":51,"column":165},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":129}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":30,"column":2}},{"generated":{"line":52,"column":6},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":30,"column":6}},{"name":"monad","generated":{"line":52,"column":13},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":30,"column":13}},{"generated":{"line":52,"column":18},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":30,"column":6}},{"generated":{"line":52,"column":23},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":30,"column":23}},{"generated":{"line":52,"column":33},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":30,"column":2}},{"generated":{"line":52,"column":35},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":30,"column":35}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":31,"column":4}},{"generated":{"line":53,"column":11},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":31,"column":11}},{"name":"x","generated":{"line":53,"column":21},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":31,"column":21}},{"generated":{"line":53,"column":22},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":31,"column":11}},{"generated":{"line":53,"column":24},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":31,"column":24}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":6}},{"name":"fn","generated":{"line":54,"column":13},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":13}},{"name":"monad","generated":{"line":54,"column":16},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":16}},{"name":"x","generated":{"line":54,"column":22},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":22}},{"generated":{"line":54,"column":23},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":16}},{"generated":{"line":54,"column":24},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":13}},{"name":"x","generated":{"line":54,"column":26},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":26}},{"generated":{"line":54,"column":27},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":13}},{"generated":{"line":54,"column":28},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":32,"column":6}},{"generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":33,"column":5}},{"generated":{"line":55,"column":5},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":31,"column":4}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":34,"column":3}},{"generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":2}},{"generated":{"line":57,"column":9},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":9}},{"generated":{"line":57,"column":33},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":19}},{"generated":{"line":57,"column":38},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":9}},{"generated":{"line":57,"column":40},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":26}},{"name":"fn","generated":{"line":57,"column":59},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":30}},{"generated":{"line":57,"column":61},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":26}},{"name":"monad","generated":{"line":57,"column":63},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":34}},{"generated":{"line":57,"column":68},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":26}},{"generated":{"line":57,"column":69},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":9}},{"generated":{"line":57,"column":70},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":35,"column":2}},{"generated":{"line":58,"column":0},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":36,"column":1}},{"generated":{"line":58,"column":1},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":47}},{"generated":{"line":58,"column":2},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":25}},{"generated":{"line":58,"column":3},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":29,"column":0}},{"name":"chain","generated":{"line":59,"column":18},"source":"..\\node_modules\\ramda\\es\\chain.js","original":{"line":37,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\chain.js":"import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _makeFlat from './internal/_makeFlat';\nimport _xchain from './internal/_xchain';\nimport map from './map';\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\nexport default chain;"},"lineCount":null}},"hash":"427cc4fd92b8ff555aabe0a724e093e2","cacheData":{"env":{}}}