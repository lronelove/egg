{"id":"..\\node_modules\\ramda\\es\\mapAccumRight.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\mapAccumRight.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry3.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *value* and *acc*, and should\n * return a tuple *[value, acc]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var append = (a, b) => [a + b, a + b];\n *\n *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   [\n *     f(b, f(c, f(d, a)[0])[0])[1],\n *     f(c, f(d, a)[0])[1],\n *     f(d, a)[1],\n *   ]\n *   f(b, f(c, f(d, a)[0])[0])[0],\n * ]\n */\nvar mapAccumRight = /*#__PURE__*/(0, _curry2.default)(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(list[idx], tuple[0]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [result, tuple[0]];\n});\nexports.default = mapAccumRight;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":3,"column":0}},{"generated":{"line":50,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":0}},{"name":"mapAccumRight","generated":{"line":50,"column":4},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":4}},{"generated":{"line":50,"column":20},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":20}},{"generated":{"line":50,"column":33},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":33}},{"generated":{"line":50,"column":54},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":41}},{"name":"mapAccumRight","generated":{"line":50,"column":63},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":50}},{"generated":{"line":50,"column":76},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":41}},{"name":"fn","generated":{"line":50,"column":77},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":64}},{"generated":{"line":50,"column":79},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":41}},{"name":"acc","generated":{"line":50,"column":81},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":68}},{"generated":{"line":50,"column":84},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":41}},{"name":"list","generated":{"line":50,"column":86},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":73}},{"generated":{"line":50,"column":90},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":41}},{"generated":{"line":50,"column":92},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":79}},{"generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":41,"column":2}},{"name":"idx","generated":{"line":51,"column":6},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":41,"column":6}},{"name":"list","generated":{"line":51,"column":12},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":41,"column":12}},{"name":"length","generated":{"line":51,"column":17},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":41,"column":17}},{"generated":{"line":51,"column":23},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":41,"column":12}},{"generated":{"line":51,"column":26},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":41,"column":26}},{"generated":{"line":51,"column":27},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":41,"column":2}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":42,"column":2}},{"name":"result","generated":{"line":52,"column":6},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":42,"column":6}},{"generated":{"line":52,"column":15},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":42,"column":15}},{"generated":{"line":52,"column":17},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":42,"column":2}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":43,"column":2}},{"name":"tuple","generated":{"line":53,"column":6},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":43,"column":6}},{"generated":{"line":53,"column":14},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":43,"column":14}},{"name":"acc","generated":{"line":53,"column":15},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":43,"column":15}},{"generated":{"line":53,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":43,"column":14}},{"generated":{"line":53,"column":19},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":43,"column":2}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":44,"column":2}},{"name":"idx","generated":{"line":54,"column":9},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":44,"column":9}},{"generated":{"line":54,"column":16},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":44,"column":16}},{"generated":{"line":54,"column":17},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":44,"column":2}},{"generated":{"line":54,"column":19},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":44,"column":19}},{"name":"tuple","generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":4}},{"name":"fn","generated":{"line":55,"column":12},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":12}},{"name":"list","generated":{"line":55,"column":15},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":15}},{"name":"idx","generated":{"line":55,"column":20},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":20}},{"generated":{"line":55,"column":23},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":15}},{"generated":{"line":55,"column":24},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":12}},{"name":"tuple","generated":{"line":55,"column":26},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":26}},{"generated":{"line":55,"column":32},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":32}},{"generated":{"line":55,"column":33},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":26}},{"generated":{"line":55,"column":34},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":12}},{"generated":{"line":55,"column":35},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":45,"column":4}},{"name":"result","generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":46,"column":4}},{"name":"idx","generated":{"line":56,"column":11},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":46,"column":11}},{"generated":{"line":56,"column":14},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":46,"column":4}},{"name":"tuple","generated":{"line":56,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":46,"column":18}},{"generated":{"line":56,"column":24},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":46,"column":24}},{"generated":{"line":56,"column":25},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":46,"column":18}},{"generated":{"line":56,"column":26},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":46,"column":4}},{"name":"idx","generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":47,"column":4}},{"generated":{"line":57,"column":11},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":47,"column":11}},{"generated":{"line":57,"column":12},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":47,"column":4}},{"generated":{"line":58,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":48,"column":3}},{"generated":{"line":59,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":2}},{"generated":{"line":59,"column":9},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":9}},{"name":"result","generated":{"line":59,"column":10},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":10}},{"generated":{"line":59,"column":16},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":9}},{"name":"tuple","generated":{"line":59,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":18}},{"generated":{"line":59,"column":24},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":24}},{"generated":{"line":59,"column":25},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":18}},{"generated":{"line":59,"column":26},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":9}},{"generated":{"line":59,"column":27},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":49,"column":2}},{"generated":{"line":60,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":50,"column":1}},{"generated":{"line":60,"column":1},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":33}},{"generated":{"line":60,"column":2},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":40,"column":0}},{"name":"mapAccumRight","generated":{"line":61,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccumRight.js","original":{"line":51,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\mapAccumRight.js":"import _curry3 from './internal/_curry3';\n\n/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *value* and *acc*, and should\n * return a tuple *[value, acc]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var append = (a, b) => [a + b, a + b];\n *\n *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   [\n *     f(b, f(c, f(d, a)[0])[0])[1],\n *     f(c, f(d, a)[0])[1],\n *     f(d, a)[1],\n *   ]\n *   f(b, f(c, f(d, a)[0])[0])[0],\n * ]\n */\nvar mapAccumRight = /*#__PURE__*/_curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(list[idx], tuple[0]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [result, tuple[0]];\n});\nexport default mapAccumRight;"},"lineCount":null}},"hash":"65082f45205812a708b9b212769bc47c","cacheData":{"env":{}}}