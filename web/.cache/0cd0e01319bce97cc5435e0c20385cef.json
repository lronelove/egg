{"id":"..\\node_modules\\ramda\\es\\useWith.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\useWith.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./curryN","loc":{"line":2,"column":19},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\useWith.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\curryN.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _curryN = require('./curryN');\n\nvar _curryN2 = _interopRequireDefault(_curryN);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nvar useWith = /*#__PURE__*/(0, _curry3.default)(function useWith(fn, transformers) {\n  return (0, _curryN2.default)(transformers.length, function () {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\nexports.default = useWith;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":4,"column":0}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":0}},{"name":"useWith","generated":{"line":46,"column":4},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":4}},{"generated":{"line":46,"column":14},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":14}},{"generated":{"line":46,"column":27},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":27}},{"generated":{"line":46,"column":48},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":35}},{"name":"useWith","generated":{"line":46,"column":57},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":44}},{"generated":{"line":46,"column":64},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":35}},{"name":"fn","generated":{"line":46,"column":65},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":52}},{"generated":{"line":46,"column":67},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":35}},{"name":"transformers","generated":{"line":46,"column":69},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":56}},{"generated":{"line":46,"column":81},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":35}},{"generated":{"line":46,"column":83},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":70}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":2}},{"generated":{"line":47,"column":9},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":9}},{"name":"transformers","generated":{"line":47,"column":31},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":16}},{"name":"length","generated":{"line":47,"column":44},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":29}},{"generated":{"line":47,"column":50},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":9}},{"generated":{"line":47,"column":52},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":37}},{"generated":{"line":47,"column":64},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":49}},{"generated":{"line":48,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":35,"column":4}},{"name":"args","generated":{"line":48,"column":8},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":35,"column":8}},{"generated":{"line":48,"column":15},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":35,"column":15}},{"generated":{"line":48,"column":17},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":35,"column":4}},{"generated":{"line":49,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":36,"column":4}},{"name":"idx","generated":{"line":49,"column":8},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":36,"column":8}},{"generated":{"line":49,"column":14},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":36,"column":14}},{"generated":{"line":49,"column":15},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":36,"column":4}},{"generated":{"line":50,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":37,"column":4}},{"name":"idx","generated":{"line":50,"column":11},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":37,"column":11}},{"name":"transformers","generated":{"line":50,"column":17},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":37,"column":17}},{"name":"length","generated":{"line":50,"column":30},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":37,"column":30}},{"generated":{"line":50,"column":36},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":37,"column":4}},{"generated":{"line":50,"column":38},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":37,"column":38}},{"name":"args","generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":6}},{"name":"push","generated":{"line":51,"column":11},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":11}},{"generated":{"line":51,"column":15},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":6}},{"name":"transformers","generated":{"line":51,"column":16},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":16}},{"name":"idx","generated":{"line":51,"column":29},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":29}},{"generated":{"line":51,"column":32},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":16}},{"name":"call","generated":{"line":51,"column":34},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":34}},{"generated":{"line":51,"column":38},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":16}},{"generated":{"line":51,"column":39},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":39}},{"generated":{"line":51,"column":43},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":16}},{"name":"arguments","generated":{"line":51,"column":45},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":45}},{"name":"idx","generated":{"line":51,"column":55},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":55}},{"generated":{"line":51,"column":58},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":45}},{"generated":{"line":51,"column":59},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":16}},{"generated":{"line":51,"column":60},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":38,"column":6}},{"name":"idx","generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":39,"column":6}},{"generated":{"line":52,"column":13},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":39,"column":13}},{"generated":{"line":52,"column":14},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":39,"column":6}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":40,"column":5}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":4}},{"name":"fn","generated":{"line":54,"column":11},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":11}},{"name":"apply","generated":{"line":54,"column":14},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":14}},{"generated":{"line":54,"column":19},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":11}},{"generated":{"line":54,"column":20},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":20}},{"generated":{"line":54,"column":24},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":11}},{"name":"args","generated":{"line":54,"column":26},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":26}},{"name":"concat","generated":{"line":54,"column":31},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":31}},{"generated":{"line":54,"column":37},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":26}},{"name":"Array","generated":{"line":54,"column":38},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":38}},{"name":"prototype","generated":{"line":54,"column":44},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":44}},{"generated":{"line":54,"column":53},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":38}},{"name":"slice","generated":{"line":54,"column":54},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":54}},{"generated":{"line":54,"column":59},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":38}},{"name":"call","generated":{"line":54,"column":60},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":60}},{"generated":{"line":54,"column":64},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":38}},{"name":"arguments","generated":{"line":54,"column":65},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":65}},{"generated":{"line":54,"column":74},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":38}},{"name":"transformers","generated":{"line":54,"column":76},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":76}},{"name":"length","generated":{"line":54,"column":89},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":89}},{"generated":{"line":54,"column":95},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":38}},{"generated":{"line":54,"column":96},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":26}},{"generated":{"line":54,"column":97},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":11}},{"generated":{"line":54,"column":98},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":41,"column":4}},{"generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":42,"column":3}},{"generated":{"line":55,"column":3},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":9}},{"generated":{"line":55,"column":4},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":34,"column":2}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":43,"column":1}},{"generated":{"line":56,"column":1},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":27}},{"generated":{"line":56,"column":2},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":33,"column":0}},{"name":"useWith","generated":{"line":57,"column":18},"source":"..\\node_modules\\ramda\\es\\useWith.js","original":{"line":44,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\useWith.js":"import _curry2 from './internal/_curry2';\nimport curryN from './curryN';\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nvar useWith = /*#__PURE__*/_curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function () {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\nexport default useWith;"},"lineCount":null}},"hash":"6619d31f166f5a3696e36545e64eae4a","cacheData":{"env":{}}}