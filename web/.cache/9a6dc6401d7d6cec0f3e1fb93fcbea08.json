{"id":"..\\node_modules\\ramda\\es\\composeK.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./chain","loc":{"line":1,"column":18},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\composeK.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\chain.js"},{"name":"./compose","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\composeK.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\compose.js"},{"name":"./map","loc":{"line":3,"column":16},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\composeK.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\map.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = composeK;\n\nvar _chain = require('./chain');\n\nvar _chain2 = _interopRequireDefault(_chain);\n\nvar _compose = require('./compose');\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _map = require('./map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       var get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       var getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\nfunction composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return (0, _compose2.default)(_compose2.default.apply(this, (0, _map2.default)(_chain2.default, init)), last);\n}","map":{"mappings":[{"name":"composeK","generated":{"line":6,"column":18},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":35,"column":24}},{"generated":{"line":8,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":2,"column":0}},{"generated":{"line":16,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":3,"column":0}},{"generated":{"line":22,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":5,"column":0}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":35,"column":15}},{"name":"composeK","generated":{"line":52,"column":9},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":35,"column":24}},{"generated":{"line":52,"column":17},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":35,"column":15}},{"generated":{"line":52,"column":20},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":35,"column":35}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":36,"column":2}},{"name":"arguments","generated":{"line":53,"column":6},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":36,"column":6}},{"name":"length","generated":{"line":53,"column":16},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":36,"column":16}},{"generated":{"line":53,"column":22},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":36,"column":6}},{"generated":{"line":53,"column":27},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":36,"column":27}},{"generated":{"line":53,"column":28},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":36,"column":2}},{"generated":{"line":53,"column":30},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":36,"column":30}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":37,"column":4}},{"generated":{"line":54,"column":10},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":37,"column":10}},{"name":"Error","generated":{"line":54,"column":14},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":37,"column":14}},{"generated":{"line":54,"column":19},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":37,"column":10}},{"generated":{"line":54,"column":20},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":37,"column":20}},{"generated":{"line":54,"column":61},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":37,"column":10}},{"generated":{"line":54,"column":62},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":37,"column":4}},{"generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":38,"column":3}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":2}},{"name":"init","generated":{"line":56,"column":6},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":6}},{"name":"Array","generated":{"line":56,"column":13},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":13}},{"name":"prototype","generated":{"line":56,"column":19},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":19}},{"generated":{"line":56,"column":28},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":13}},{"name":"slice","generated":{"line":56,"column":29},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":29}},{"generated":{"line":56,"column":34},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":13}},{"name":"call","generated":{"line":56,"column":35},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":35}},{"generated":{"line":56,"column":39},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":13}},{"name":"arguments","generated":{"line":56,"column":40},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":40}},{"generated":{"line":56,"column":49},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":13}},{"generated":{"line":56,"column":50},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":39,"column":2}},{"generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":40,"column":2}},{"name":"last","generated":{"line":57,"column":6},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":40,"column":6}},{"name":"init","generated":{"line":57,"column":13},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":40,"column":13}},{"name":"pop","generated":{"line":57,"column":18},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":40,"column":18}},{"generated":{"line":57,"column":21},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":40,"column":13}},{"generated":{"line":57,"column":23},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":40,"column":2}},{"generated":{"line":58,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":2}},{"generated":{"line":58,"column":9},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":9}},{"name":"compose","generated":{"line":58,"column":32},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":17}},{"name":"apply","generated":{"line":58,"column":50},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":25}},{"generated":{"line":58,"column":55},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":17}},{"generated":{"line":58,"column":56},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":31}},{"generated":{"line":58,"column":60},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":17}},{"generated":{"line":58,"column":62},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":37}},{"name":"chain","generated":{"line":58,"column":81},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":41}},{"generated":{"line":58,"column":96},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":37}},{"name":"init","generated":{"line":58,"column":98},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":48}},{"generated":{"line":58,"column":102},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":37}},{"generated":{"line":58,"column":103},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":17}},{"generated":{"line":58,"column":104},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":9}},{"name":"last","generated":{"line":58,"column":106},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":56}},{"generated":{"line":58,"column":110},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":9}},{"generated":{"line":58,"column":111},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":41,"column":2}},{"generated":{"line":59,"column":0},"source":"..\\node_modules\\ramda\\es\\composeK.js","original":{"line":42,"column":1}}],"sources":{"..\\node_modules\\ramda\\es\\composeK.js":"import chain from './chain';\nimport compose from './compose';\nimport map from './map';\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       var get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       var getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\nexport default function composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n}"},"lineCount":null}},"hash":"f8c85ade6b6fb79d79aafe8902a8b880","cacheData":{"env":{}}}