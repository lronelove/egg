{"id":"..\\node_modules\\ramda\\es\\curryN.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_arity","loc":{"line":1,"column":19},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\curryN.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_arity.js"},{"name":"./internal/_curry1","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\curryN.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry1.js"},{"name":"./internal/_curry2","loc":{"line":3,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\curryN.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./internal/_curryN","loc":{"line":4,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\curryN.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curryN.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _arity2 = require('./internal/_arity');\n\nvar _arity3 = _interopRequireDefault(_arity2);\n\nvar _curry = require('./internal/_curry1');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _curry4 = require('./internal/_curry2');\n\nvar _curry5 = _interopRequireDefault(_curry4);\n\nvar _curryN2 = require('./internal/_curryN');\n\nvar _curryN3 = _interopRequireDefault(_curryN2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/(0, _curry5.default)(function curryN(length, fn) {\n  if (length === 1) {\n    return (0, _curry3.default)(fn);\n  }\n  return (0, _arity3.default)(length, (0, _curryN3.default)(length, [], fn));\n});\nexports.default = curryN;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":4,"column":0}},{"generated":{"line":25,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":6,"column":0}},{"generated":{"line":67,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":0}},{"name":"curryN","generated":{"line":67,"column":4},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":4}},{"generated":{"line":67,"column":13},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":13}},{"generated":{"line":67,"column":26},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":26}},{"generated":{"line":67,"column":47},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":34}},{"name":"curryN","generated":{"line":67,"column":56},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":43}},{"generated":{"line":67,"column":62},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":34}},{"name":"length","generated":{"line":67,"column":63},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":50}},{"generated":{"line":67,"column":69},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":34}},{"name":"fn","generated":{"line":67,"column":71},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":58}},{"generated":{"line":67,"column":73},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":34}},{"generated":{"line":67,"column":75},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":62}},{"generated":{"line":68,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":49,"column":2}},{"name":"length","generated":{"line":68,"column":6},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":49,"column":6}},{"generated":{"line":68,"column":17},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":49,"column":17}},{"generated":{"line":68,"column":18},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":49,"column":2}},{"generated":{"line":68,"column":20},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":49,"column":20}},{"generated":{"line":69,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":50,"column":4}},{"generated":{"line":69,"column":11},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":50,"column":11}},{"name":"fn","generated":{"line":69,"column":32},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":50,"column":19}},{"generated":{"line":69,"column":34},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":50,"column":11}},{"generated":{"line":69,"column":35},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":50,"column":4}},{"generated":{"line":70,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":51,"column":3}},{"generated":{"line":71,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":2}},{"generated":{"line":71,"column":9},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":9}},{"name":"length","generated":{"line":71,"column":30},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":16}},{"generated":{"line":71,"column":36},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":9}},{"generated":{"line":71,"column":38},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":24}},{"name":"length","generated":{"line":71,"column":60},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":32}},{"generated":{"line":71,"column":66},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":24}},{"generated":{"line":71,"column":68},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":40}},{"generated":{"line":71,"column":70},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":24}},{"name":"fn","generated":{"line":71,"column":72},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":44}},{"generated":{"line":71,"column":74},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":24}},{"generated":{"line":71,"column":75},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":9}},{"generated":{"line":71,"column":76},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":52,"column":2}},{"generated":{"line":72,"column":0},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":53,"column":1}},{"generated":{"line":72,"column":1},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":26}},{"generated":{"line":72,"column":2},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":48,"column":0}},{"name":"curryN","generated":{"line":73,"column":18},"source":"..\\node_modules\\ramda\\es\\curryN.js","original":{"line":54,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\curryN.js":"import _arity from './internal/_arity';\nimport _curry1 from './internal/_curry1';\nimport _curry2 from './internal/_curry2';\nimport _curryN from './internal/_curryN';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;"},"lineCount":null}},"hash":"265f0f83b3a85c67d1dd8639778da1a2","cacheData":{"env":{}}}