{"id":"..\\node_modules\\ramda\\es\\pathEq.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\pathEq.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry3.js"},{"name":"./equals","loc":{"line":2,"column":19},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\pathEq.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\equals.js"},{"name":"./path","loc":{"line":3,"column":17},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\pathEq.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\path.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _equals = require('./equals');\n\nvar _equals2 = _interopRequireDefault(_equals);\n\nvar _path2 = require('./path');\n\nvar _path3 = _interopRequireDefault(_path2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nvar pathEq = /*#__PURE__*/(0, _curry2.default)(function pathEq(_path, val, obj) {\n  return (0, _equals2.default)((0, _path3.default)(_path, obj), val);\n});\nexports.default = pathEq;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":5,"column":0}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":0}},{"name":"pathEq","generated":{"line":45,"column":4},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":4}},{"generated":{"line":45,"column":13},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":13}},{"generated":{"line":45,"column":26},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":26}},{"generated":{"line":45,"column":47},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":34}},{"name":"pathEq","generated":{"line":45,"column":56},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":43}},{"generated":{"line":45,"column":62},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":34}},{"name":"_path","generated":{"line":45,"column":63},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":50}},{"generated":{"line":45,"column":68},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":34}},{"name":"val","generated":{"line":45,"column":70},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":57}},{"generated":{"line":45,"column":73},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":34}},{"name":"obj","generated":{"line":45,"column":75},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":62}},{"generated":{"line":45,"column":78},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":34}},{"generated":{"line":45,"column":80},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":67}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":2}},{"generated":{"line":46,"column":9},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":9}},{"generated":{"line":46,"column":31},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":16}},{"name":"_path","generated":{"line":46,"column":51},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":21}},{"generated":{"line":46,"column":56},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":16}},{"name":"obj","generated":{"line":46,"column":58},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":28}},{"generated":{"line":46,"column":61},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":16}},{"generated":{"line":46,"column":62},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":9}},{"name":"val","generated":{"line":46,"column":64},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":34}},{"generated":{"line":46,"column":67},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":9}},{"generated":{"line":46,"column":68},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":30,"column":2}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":31,"column":1}},{"generated":{"line":47,"column":1},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":26}},{"generated":{"line":47,"column":2},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":29,"column":0}},{"name":"pathEq","generated":{"line":48,"column":18},"source":"..\\node_modules\\ramda\\es\\pathEq.js","original":{"line":32,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\pathEq.js":"import _curry3 from './internal/_curry3';\nimport equals from './equals';\nimport path from './path';\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nvar pathEq = /*#__PURE__*/_curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\nexport default pathEq;"},"lineCount":null}},"hash":"722b84dcb42616738c39813827a7831f","cacheData":{"env":{}}}