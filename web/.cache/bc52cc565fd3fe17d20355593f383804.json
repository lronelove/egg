{"id":"..\\node_modules\\ramda\\es\\both.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\both.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./internal/_isFunction","loc":{"line":2,"column":24},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\both.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_isFunction.js"},{"name":"./and","loc":{"line":3,"column":16},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\both.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\and.js"},{"name":"./lift","loc":{"line":4,"column":17},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\both.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\lift.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _isFunction2 = require('./internal/_isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _and = require('./and');\n\nvar _and2 = _interopRequireDefault(_and);\n\nvar _lift = require('./lift');\n\nvar _lift2 = _interopRequireDefault(_lift);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      var gt10 = R.gt(R.__, 10)\n *      var lt20 = R.lt(R.__, 20)\n *      var f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n */\nvar both = /*#__PURE__*/(0, _curry3.default)(function both(f, g) {\n  return (0, _isFunction3.default)(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : (0, _lift2.default)(_and2.default)(f, g);\n});\nexports.default = both;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":4,"column":0}},{"generated":{"line":25,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":6,"column":0}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":0}},{"name":"both","generated":{"line":53,"column":4},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":4}},{"generated":{"line":53,"column":11},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":11}},{"generated":{"line":53,"column":24},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":24}},{"generated":{"line":53,"column":45},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":32}},{"name":"both","generated":{"line":53,"column":54},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":41}},{"generated":{"line":53,"column":58},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":32}},{"name":"f","generated":{"line":53,"column":59},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":46}},{"generated":{"line":53,"column":60},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":32}},{"name":"g","generated":{"line":53,"column":62},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":49}},{"generated":{"line":53,"column":63},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":32}},{"generated":{"line":53,"column":65},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":52}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":2}},{"generated":{"line":54,"column":9},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":9}},{"name":"f","generated":{"line":54,"column":35},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":21}},{"generated":{"line":54,"column":36},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":9}},{"generated":{"line":54,"column":40},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":26}},{"name":"_both","generated":{"line":54,"column":49},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":35}},{"generated":{"line":54,"column":54},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":26}},{"generated":{"line":54,"column":57},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":43}},{"generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":4}},{"name":"f","generated":{"line":55,"column":11},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":11}},{"name":"apply","generated":{"line":55,"column":13},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":13}},{"generated":{"line":55,"column":18},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":11}},{"generated":{"line":55,"column":19},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":19}},{"generated":{"line":55,"column":23},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":11}},{"name":"arguments","generated":{"line":55,"column":25},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":25}},{"generated":{"line":55,"column":34},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":11}},{"name":"g","generated":{"line":55,"column":39},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":39}},{"name":"apply","generated":{"line":55,"column":41},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":41}},{"generated":{"line":55,"column":46},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":39}},{"generated":{"line":55,"column":47},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":47}},{"generated":{"line":55,"column":51},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":39}},{"name":"arguments","generated":{"line":55,"column":53},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":53}},{"generated":{"line":55,"column":62},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":39}},{"generated":{"line":55,"column":63},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":36,"column":4}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":37,"column":3}},{"generated":{"line":56,"column":3},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":9}},{"generated":{"line":56,"column":6},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":37,"column":6}},{"name":"and","generated":{"line":56,"column":26},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":37,"column":11}},{"generated":{"line":56,"column":39},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":37,"column":6}},{"name":"f","generated":{"line":56,"column":41},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":37,"column":16}},{"generated":{"line":56,"column":42},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":37,"column":6}},{"name":"g","generated":{"line":56,"column":44},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":37,"column":19}},{"generated":{"line":56,"column":45},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":37,"column":6}},{"generated":{"line":56,"column":46},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":35,"column":2}},{"generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":38,"column":1}},{"generated":{"line":57,"column":1},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":24}},{"generated":{"line":57,"column":2},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":34,"column":0}},{"name":"both","generated":{"line":58,"column":18},"source":"..\\node_modules\\ramda\\es\\both.js","original":{"line":39,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\both.js":"import _curry2 from './internal/_curry2';\nimport _isFunction from './internal/_isFunction';\nimport and from './and';\nimport lift from './lift';\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      var gt10 = R.gt(R.__, 10)\n *      var lt20 = R.lt(R.__, 20)\n *      var f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n */\nvar both = /*#__PURE__*/_curry2(function both(f, g) {\n  return _isFunction(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : lift(and)(f, g);\n});\nexport default both;"},"lineCount":null}},"hash":"2bc53390d50b507a5270499115fafcbc","cacheData":{"env":{}}}