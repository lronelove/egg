{"id":"..\\node_modules\\ramda\\es\\equals.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\equals.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./internal/_equals","loc":{"line":2,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\equals.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_equals.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _equals2 = require('./internal/_equals');\n\nvar _equals3 = _interopRequireDefault(_equals2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/(0, _curry3.default)(function equals(a, b) {\n  return (0, _equals3.default)(a, b, [], []);\n});\nexports.default = equals;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":4,"column":0}},{"generated":{"line":42,"column":0},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":0}},{"name":"equals","generated":{"line":42,"column":4},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":4}},{"generated":{"line":42,"column":13},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":13}},{"generated":{"line":42,"column":26},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":26}},{"generated":{"line":42,"column":47},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":34}},{"name":"equals","generated":{"line":42,"column":56},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":43}},{"generated":{"line":42,"column":62},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":34}},{"name":"a","generated":{"line":42,"column":63},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":50}},{"generated":{"line":42,"column":64},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":34}},{"name":"b","generated":{"line":42,"column":66},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":53}},{"generated":{"line":42,"column":67},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":34}},{"generated":{"line":42,"column":69},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":56}},{"generated":{"line":43,"column":0},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":2}},{"generated":{"line":43,"column":9},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":9}},{"name":"a","generated":{"line":43,"column":31},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":17}},{"generated":{"line":43,"column":32},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":9}},{"name":"b","generated":{"line":43,"column":34},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":20}},{"generated":{"line":43,"column":35},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":9}},{"generated":{"line":43,"column":37},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":23}},{"generated":{"line":43,"column":39},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":9}},{"generated":{"line":43,"column":41},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":27}},{"generated":{"line":43,"column":43},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":9}},{"generated":{"line":43,"column":44},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":30,"column":2}},{"generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":31,"column":1}},{"generated":{"line":44,"column":1},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":26}},{"generated":{"line":44,"column":2},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":29,"column":0}},{"name":"equals","generated":{"line":45,"column":18},"source":"..\\node_modules\\ramda\\es\\equals.js","original":{"line":32,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\equals.js":"import _curry2 from './internal/_curry2';\nimport _equals from './internal/_equals';\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nexport default equals;"},"lineCount":null}},"hash":"1334e2523f2bc86a6a6b5a71f77ed968","cacheData":{"env":{}}}