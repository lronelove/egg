{"id":"..\\node_modules\\ramda\\es\\always.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry1","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\always.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry1.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry1');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = /*#__PURE__*/(0, _curry2.default)(function always(val) {\n  return function () {\n    return val;\n  };\n});\nexports.default = always;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":3,"column":0}},{"generated":{"line":32,"column":0},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":0}},{"name":"always","generated":{"line":32,"column":4},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":4}},{"generated":{"line":32,"column":13},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":13}},{"generated":{"line":32,"column":26},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":26}},{"generated":{"line":32,"column":47},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":34}},{"name":"always","generated":{"line":32,"column":56},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":43}},{"generated":{"line":32,"column":62},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":34}},{"name":"val","generated":{"line":32,"column":63},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":50}},{"generated":{"line":32,"column":66},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":34}},{"generated":{"line":32,"column":68},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":55}},{"generated":{"line":33,"column":0},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":23,"column":2}},{"generated":{"line":33,"column":9},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":23,"column":9}},{"generated":{"line":33,"column":21},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":23,"column":21}},{"generated":{"line":34,"column":0},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":24,"column":4}},{"name":"val","generated":{"line":34,"column":11},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":24,"column":11}},{"generated":{"line":34,"column":14},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":24,"column":4}},{"generated":{"line":35,"column":0},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":25,"column":3}},{"generated":{"line":35,"column":3},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":23,"column":2}},{"generated":{"line":36,"column":0},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":26,"column":1}},{"generated":{"line":36,"column":1},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":26}},{"generated":{"line":36,"column":2},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":22,"column":0}},{"name":"always","generated":{"line":37,"column":18},"source":"..\\node_modules\\ramda\\es\\always.js","original":{"line":27,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\always.js":"import _curry1 from './internal/_curry1';\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = /*#__PURE__*/_curry1(function always(val) {\n  return function () {\n    return val;\n  };\n});\nexport default always;"},"lineCount":null}},"hash":"fbb75933d9efb98ff3dd0d5be7af4f97","cacheData":{"env":{}}}