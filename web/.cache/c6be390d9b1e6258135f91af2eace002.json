{"id":"..\\node_modules\\ramda\\es\\mathMod.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\mathMod.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./internal/_isInteger","loc":{"line":2,"column":23},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\mathMod.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_isInteger.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _isInteger2 = require('./internal/_isInteger');\n\nvar _isInteger3 = _interopRequireDefault(_isInteger2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      var clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      var seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nvar mathMod = /*#__PURE__*/(0, _curry3.default)(function mathMod(m, p) {\n  if (!(0, _isInteger3.default)(m)) {\n    return NaN;\n  }\n  if (!(0, _isInteger3.default)(p) || p < 1) {\n    return NaN;\n  }\n  return (m % p + p) % p;\n});\nexports.default = mathMod;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":4,"column":0}},{"generated":{"line":50,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":0}},{"name":"mathMod","generated":{"line":50,"column":4},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":4}},{"generated":{"line":50,"column":14},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":14}},{"generated":{"line":50,"column":27},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":27}},{"generated":{"line":50,"column":48},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":35}},{"name":"mathMod","generated":{"line":50,"column":57},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":44}},{"generated":{"line":50,"column":64},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":35}},{"name":"m","generated":{"line":50,"column":65},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":52}},{"generated":{"line":50,"column":66},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":35}},{"name":"p","generated":{"line":50,"column":68},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":55}},{"generated":{"line":50,"column":69},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":35}},{"generated":{"line":50,"column":71},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":58}},{"generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":38,"column":2}},{"generated":{"line":51,"column":6},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":38,"column":6}},{"generated":{"line":51,"column":7},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":38,"column":7}},{"name":"m","generated":{"line":51,"column":32},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":38,"column":18}},{"generated":{"line":51,"column":33},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":38,"column":7}},{"generated":{"line":51,"column":34},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":38,"column":2}},{"generated":{"line":51,"column":36},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":38,"column":22}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":39,"column":4}},{"name":"NaN","generated":{"line":52,"column":11},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":39,"column":11}},{"generated":{"line":52,"column":14},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":39,"column":4}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":40,"column":3}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":2}},{"generated":{"line":54,"column":6},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":6}},{"generated":{"line":54,"column":7},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":7}},{"name":"p","generated":{"line":54,"column":32},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":18}},{"generated":{"line":54,"column":33},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":7}},{"generated":{"line":54,"column":34},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":6}},{"name":"p","generated":{"line":54,"column":38},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":24}},{"generated":{"line":54,"column":42},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":28}},{"generated":{"line":54,"column":43},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":2}},{"generated":{"line":54,"column":45},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":41,"column":31}},{"generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":42,"column":4}},{"name":"NaN","generated":{"line":55,"column":11},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":42,"column":11}},{"generated":{"line":55,"column":14},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":42,"column":4}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":43,"column":3}},{"generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":2}},{"generated":{"line":57,"column":9},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":9}},{"name":"m","generated":{"line":57,"column":10},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":10}},{"name":"p","generated":{"line":57,"column":14},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":14}},{"generated":{"line":57,"column":15},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":10}},{"name":"p","generated":{"line":57,"column":18},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":18}},{"generated":{"line":57,"column":19},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":9}},{"name":"p","generated":{"line":57,"column":23},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":23}},{"generated":{"line":57,"column":24},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":44,"column":2}},{"generated":{"line":58,"column":0},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":45,"column":1}},{"generated":{"line":58,"column":1},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":27}},{"generated":{"line":58,"column":2},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":37,"column":0}},{"name":"mathMod","generated":{"line":59,"column":18},"source":"..\\node_modules\\ramda\\es\\mathMod.js","original":{"line":46,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\mathMod.js":"import _curry2 from './internal/_curry2';\nimport _isInteger from './internal/_isInteger';\n\n/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      var clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      var seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nvar mathMod = /*#__PURE__*/_curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) {\n    return NaN;\n  }\n  if (!_isInteger(p) || p < 1) {\n    return NaN;\n  }\n  return (m % p + p) % p;\n});\nexport default mathMod;"},"lineCount":null}},"hash":"41e588b436ffd975f5585b310d30ee6a","cacheData":{"env":{}}}