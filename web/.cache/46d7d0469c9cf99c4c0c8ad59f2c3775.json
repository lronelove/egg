{"id":"..\\node_modules\\ramda\\es\\apply.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\apply.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry2.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = /*#__PURE__*/(0, _curry3.default)(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nexports.default = apply;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":3,"column":0}},{"generated":{"line":33,"column":0},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":0}},{"name":"apply","generated":{"line":33,"column":4},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":4}},{"generated":{"line":33,"column":12},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":12}},{"generated":{"line":33,"column":25},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":25}},{"generated":{"line":33,"column":46},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":33}},{"name":"apply","generated":{"line":33,"column":55},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":42}},{"generated":{"line":33,"column":60},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":33}},{"name":"fn","generated":{"line":33,"column":61},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":48}},{"generated":{"line":33,"column":63},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":33}},{"name":"args","generated":{"line":33,"column":65},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":52}},{"generated":{"line":33,"column":69},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":33}},{"generated":{"line":33,"column":71},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":58}},{"generated":{"line":34,"column":0},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":2}},{"name":"fn","generated":{"line":34,"column":9},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":9}},{"name":"apply","generated":{"line":34,"column":12},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":12}},{"generated":{"line":34,"column":17},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":9}},{"generated":{"line":34,"column":18},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":18}},{"generated":{"line":34,"column":22},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":9}},{"name":"args","generated":{"line":34,"column":24},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":24}},{"generated":{"line":34,"column":28},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":9}},{"generated":{"line":34,"column":29},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":24,"column":2}},{"generated":{"line":35,"column":0},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":25,"column":1}},{"generated":{"line":35,"column":1},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":25}},{"generated":{"line":35,"column":2},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":23,"column":0}},{"name":"apply","generated":{"line":36,"column":18},"source":"..\\node_modules\\ramda\\es\\apply.js","original":{"line":26,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\apply.js":"import _curry2 from './internal/_curry2';\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = /*#__PURE__*/_curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nexport default apply;"},"lineCount":null}},"hash":"ab9abe5b1107f416a09f89c8bdfcc277","cacheData":{"env":{}}}