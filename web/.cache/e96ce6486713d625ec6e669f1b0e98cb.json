{"id":"..\\node_modules\\ramda\\es\\unfold.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\unfold.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry2.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      var f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nvar unfold = /*#__PURE__*/(0, _curry3.default)(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\nexports.default = unfold;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":3,"column":0}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":0}},{"name":"unfold","generated":{"line":38,"column":4},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":4}},{"generated":{"line":38,"column":13},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":13}},{"generated":{"line":38,"column":26},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":26}},{"generated":{"line":38,"column":47},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":34}},{"name":"unfold","generated":{"line":38,"column":56},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":43}},{"generated":{"line":38,"column":62},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":34}},{"name":"fn","generated":{"line":38,"column":63},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":50}},{"generated":{"line":38,"column":65},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":34}},{"name":"seed","generated":{"line":38,"column":67},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":54}},{"generated":{"line":38,"column":71},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":34}},{"generated":{"line":38,"column":73},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":60}},{"generated":{"line":39,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":29,"column":2}},{"name":"pair","generated":{"line":39,"column":6},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":29,"column":6}},{"name":"fn","generated":{"line":39,"column":13},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":29,"column":13}},{"name":"seed","generated":{"line":39,"column":16},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":29,"column":16}},{"generated":{"line":39,"column":20},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":29,"column":13}},{"generated":{"line":39,"column":21},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":29,"column":2}},{"generated":{"line":40,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":30,"column":2}},{"name":"result","generated":{"line":40,"column":6},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":30,"column":6}},{"generated":{"line":40,"column":15},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":30,"column":15}},{"generated":{"line":40,"column":17},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":30,"column":2}},{"generated":{"line":41,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":31,"column":2}},{"name":"pair","generated":{"line":41,"column":9},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":31,"column":9}},{"name":"pair","generated":{"line":41,"column":17},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":31,"column":17}},{"name":"length","generated":{"line":41,"column":22},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":31,"column":22}},{"generated":{"line":41,"column":28},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":31,"column":2}},{"generated":{"line":41,"column":30},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":31,"column":30}},{"name":"result","generated":{"line":42,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":32,"column":4}},{"name":"result","generated":{"line":42,"column":11},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":32,"column":11}},{"name":"length","generated":{"line":42,"column":18},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":32,"column":18}},{"generated":{"line":42,"column":24},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":32,"column":4}},{"name":"pair","generated":{"line":42,"column":28},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":32,"column":28}},{"generated":{"line":42,"column":33},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":32,"column":33}},{"generated":{"line":42,"column":34},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":32,"column":28}},{"generated":{"line":42,"column":35},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":32,"column":4}},{"name":"pair","generated":{"line":43,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":33,"column":4}},{"name":"fn","generated":{"line":43,"column":11},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":33,"column":11}},{"name":"pair","generated":{"line":43,"column":14},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":33,"column":14}},{"generated":{"line":43,"column":19},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":33,"column":19}},{"generated":{"line":43,"column":20},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":33,"column":14}},{"generated":{"line":43,"column":21},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":33,"column":11}},{"generated":{"line":43,"column":22},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":33,"column":4}},{"generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":34,"column":3}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":35,"column":2}},{"name":"result","generated":{"line":45,"column":9},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":35,"column":9}},{"generated":{"line":45,"column":15},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":35,"column":2}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":36,"column":1}},{"generated":{"line":46,"column":1},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":26}},{"generated":{"line":46,"column":2},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":28,"column":0}},{"name":"unfold","generated":{"line":47,"column":18},"source":"..\\node_modules\\ramda\\es\\unfold.js","original":{"line":37,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\unfold.js":"import _curry2 from './internal/_curry2';\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      var f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nvar unfold = /*#__PURE__*/_curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\nexport default unfold;"},"lineCount":null}},"hash":"77e3119d905ab2b1e46c3fb12c34266f","cacheData":{"env":{}}}