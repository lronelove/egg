{"id":"..\\node_modules\\ramda\\es\\aperture.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_aperture","loc":{"line":1,"column":22},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\aperture.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_aperture.js"},{"name":"./internal/_curry2","loc":{"line":2,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\aperture.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./internal/_dispatchable","loc":{"line":3,"column":26},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\aperture.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_dispatchable.js"},{"name":"./internal/_xaperture","loc":{"line":4,"column":23},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\aperture.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_xaperture.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _aperture2 = require('./internal/_aperture');\n\nvar _aperture3 = _interopRequireDefault(_aperture2);\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _dispatchable2 = require('./internal/_dispatchable');\n\nvar _dispatchable3 = _interopRequireDefault(_dispatchable2);\n\nvar _xaperture2 = require('./internal/_xaperture');\n\nvar _xaperture3 = _interopRequireDefault(_xaperture2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xaperture3.default, _aperture3.default));\nexports.default = aperture;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":4,"column":0}},{"generated":{"line":25,"column":0},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":6,"column":0}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":0}},{"name":"aperture","generated":{"line":46,"column":4},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":4}},{"generated":{"line":46,"column":15},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":15}},{"generated":{"line":46,"column":28},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":28}},{"generated":{"line":46,"column":50},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":37}},{"generated":{"line":46,"column":63},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":50}},{"generated":{"line":46,"column":91},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":64}},{"generated":{"line":46,"column":93},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":50}},{"name":"_xaperture","generated":{"line":46,"column":95},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":68}},{"generated":{"line":46,"column":114},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":50}},{"name":"_aperture","generated":{"line":46,"column":116},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":80}},{"generated":{"line":46,"column":134},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":50}},{"generated":{"line":46,"column":135},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":28}},{"generated":{"line":46,"column":136},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":27,"column":0}},{"name":"aperture","generated":{"line":47,"column":18},"source":"..\\node_modules\\ramda\\es\\aperture.js","original":{"line":28,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\aperture.js":"import _aperture from './internal/_aperture';\nimport _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xaperture from './internal/_xaperture';\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xaperture, _aperture));\nexport default aperture;"},"lineCount":null}},"hash":"f41cfffa7a95d315fa38a760d01ba0a2","cacheData":{"env":{}}}