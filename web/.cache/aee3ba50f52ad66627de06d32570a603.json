{"id":"..\\node_modules\\ramda\\es\\innerJoin.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./internal/_containsWith","loc":{"line":1,"column":26},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\innerJoin.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_containsWith.js"},{"name":"./internal/_curry3","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\innerJoin.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry3.js"},{"name":"./internal/_filter","loc":{"line":3,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\innerJoin.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_filter.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _containsWith2 = require('./internal/_containsWith');\n\nvar _containsWith3 = _interopRequireDefault(_containsWith2);\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _filter2 = require('./internal/_filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = /*#__PURE__*/(0, _curry2.default)(function innerJoin(pred, xs, ys) {\n  return (0, _filter3.default)(function (x) {\n    return (0, _containsWith3.default)(pred, x, ys);\n  }, xs);\n});\nexports.default = innerJoin;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":5,"column":0}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":0}},{"name":"innerJoin","generated":{"line":56,"column":4},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":4}},{"generated":{"line":56,"column":16},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":16}},{"generated":{"line":56,"column":29},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":29}},{"generated":{"line":56,"column":50},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":37}},{"name":"innerJoin","generated":{"line":56,"column":59},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":46}},{"generated":{"line":56,"column":68},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":37}},{"name":"pred","generated":{"line":56,"column":69},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":56}},{"generated":{"line":56,"column":73},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":37}},{"name":"xs","generated":{"line":56,"column":75},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":62}},{"generated":{"line":56,"column":77},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":37}},{"name":"ys","generated":{"line":56,"column":79},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":66}},{"generated":{"line":56,"column":81},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":37}},{"generated":{"line":56,"column":83},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":70}},{"generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":2}},{"generated":{"line":57,"column":9},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":9}},{"generated":{"line":57,"column":31},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":17}},{"name":"x","generated":{"line":57,"column":41},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":27}},{"generated":{"line":57,"column":42},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":17}},{"generated":{"line":57,"column":44},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":30}},{"generated":{"line":58,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":4}},{"generated":{"line":58,"column":11},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":11}},{"name":"pred","generated":{"line":58,"column":39},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":25}},{"generated":{"line":58,"column":43},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":11}},{"name":"x","generated":{"line":58,"column":45},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":31}},{"generated":{"line":58,"column":46},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":11}},{"name":"ys","generated":{"line":58,"column":48},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":34}},{"generated":{"line":58,"column":50},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":11}},{"generated":{"line":58,"column":51},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":42,"column":4}},{"generated":{"line":59,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":43,"column":3}},{"generated":{"line":59,"column":3},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":9}},{"name":"xs","generated":{"line":59,"column":5},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":43,"column":5}},{"generated":{"line":59,"column":7},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":9}},{"generated":{"line":59,"column":8},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":41,"column":2}},{"generated":{"line":60,"column":0},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":44,"column":1}},{"generated":{"line":60,"column":1},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":29}},{"generated":{"line":60,"column":2},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":40,"column":0}},{"name":"innerJoin","generated":{"line":61,"column":18},"source":"..\\node_modules\\ramda\\es\\innerJoin.js","original":{"line":45,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\innerJoin.js":"import _containsWith from './internal/_containsWith';\nimport _curry3 from './internal/_curry3';\nimport _filter from './internal/_filter';\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = /*#__PURE__*/_curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function (x) {\n    return _containsWith(pred, x, ys);\n  }, xs);\n});\nexport default innerJoin;"},"lineCount":null}},"hash":"609b77a371cf0220b87f2a1a947c913f","cacheData":{"env":{}}}