{"id":"..\\node_modules\\ramda\\es\\times.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\times.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry2.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = /*#__PURE__*/(0, _curry3.default)(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\nexports.default = times;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":3,"column":0}},{"generated":{"line":36,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":0}},{"name":"times","generated":{"line":36,"column":4},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":4}},{"generated":{"line":36,"column":12},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":12}},{"generated":{"line":36,"column":25},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":25}},{"generated":{"line":36,"column":46},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":33}},{"name":"times","generated":{"line":36,"column":55},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":42}},{"generated":{"line":36,"column":60},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":33}},{"name":"fn","generated":{"line":36,"column":61},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":48}},{"generated":{"line":36,"column":63},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":33}},{"name":"n","generated":{"line":36,"column":65},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":52}},{"generated":{"line":36,"column":66},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":33}},{"generated":{"line":36,"column":68},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":55}},{"generated":{"line":37,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":27,"column":2}},{"name":"len","generated":{"line":37,"column":6},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":27,"column":6}},{"name":"Number","generated":{"line":37,"column":12},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":27,"column":12}},{"name":"n","generated":{"line":37,"column":19},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":27,"column":19}},{"generated":{"line":37,"column":20},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":27,"column":12}},{"generated":{"line":37,"column":21},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":27,"column":2}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":28,"column":2}},{"name":"idx","generated":{"line":38,"column":6},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":28,"column":6}},{"generated":{"line":38,"column":12},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":28,"column":12}},{"generated":{"line":38,"column":13},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":28,"column":2}},{"generated":{"line":39,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":29,"column":2}},{"name":"list","generated":{"line":39,"column":6},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":29,"column":6}},{"generated":{"line":39,"column":10},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":29,"column":2}},{"generated":{"line":41,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":2}},{"name":"len","generated":{"line":41,"column":6},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":6}},{"generated":{"line":41,"column":12},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":12}},{"generated":{"line":41,"column":13},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":6}},{"name":"isNaN","generated":{"line":41,"column":17},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":17}},{"name":"len","generated":{"line":41,"column":23},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":23}},{"generated":{"line":41,"column":26},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":17}},{"generated":{"line":41,"column":27},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":2}},{"generated":{"line":41,"column":29},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":31,"column":29}},{"generated":{"line":42,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":32,"column":4}},{"generated":{"line":42,"column":10},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":32,"column":10}},{"name":"RangeError","generated":{"line":42,"column":14},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":32,"column":14}},{"generated":{"line":42,"column":24},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":32,"column":10}},{"generated":{"line":42,"column":25},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":32,"column":25}},{"generated":{"line":42,"column":58},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":32,"column":10}},{"generated":{"line":42,"column":59},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":32,"column":4}},{"generated":{"line":43,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":33,"column":3}},{"name":"list","generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":34,"column":2}},{"generated":{"line":44,"column":9},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":34,"column":9}},{"name":"Array","generated":{"line":44,"column":13},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":34,"column":13}},{"generated":{"line":44,"column":18},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":34,"column":9}},{"name":"len","generated":{"line":44,"column":19},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":34,"column":19}},{"generated":{"line":44,"column":22},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":34,"column":9}},{"generated":{"line":44,"column":23},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":34,"column":2}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":35,"column":2}},{"name":"idx","generated":{"line":45,"column":9},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":35,"column":9}},{"name":"len","generated":{"line":45,"column":15},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":35,"column":15}},{"generated":{"line":45,"column":18},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":35,"column":2}},{"generated":{"line":45,"column":20},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":35,"column":20}},{"name":"list","generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":36,"column":4}},{"name":"idx","generated":{"line":46,"column":9},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":36,"column":9}},{"generated":{"line":46,"column":12},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":36,"column":4}},{"name":"fn","generated":{"line":46,"column":16},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":36,"column":16}},{"name":"idx","generated":{"line":46,"column":19},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":36,"column":19}},{"generated":{"line":46,"column":22},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":36,"column":16}},{"generated":{"line":46,"column":23},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":36,"column":4}},{"name":"idx","generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":37,"column":4}},{"generated":{"line":47,"column":11},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":37,"column":11}},{"generated":{"line":47,"column":12},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":37,"column":4}},{"generated":{"line":48,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":38,"column":3}},{"generated":{"line":49,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":39,"column":2}},{"name":"list","generated":{"line":49,"column":9},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":39,"column":9}},{"generated":{"line":49,"column":13},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":39,"column":2}},{"generated":{"line":50,"column":0},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":40,"column":1}},{"generated":{"line":50,"column":1},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":25}},{"generated":{"line":50,"column":2},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":26,"column":0}},{"name":"times","generated":{"line":51,"column":18},"source":"..\\node_modules\\ramda\\es\\times.js","original":{"line":41,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\times.js":"import _curry2 from './internal/_curry2';\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = /*#__PURE__*/_curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\nexport default times;"},"lineCount":null}},"hash":"bd18c3be8e42afa5af2cf19229c23da4","cacheData":{"env":{}}}