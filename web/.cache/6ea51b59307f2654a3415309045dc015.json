{"id":"..\\node_modules\\ramda\\es\\unless.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\unless.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry3.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */\nvar unless = /*#__PURE__*/(0, _curry2.default)(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\nexports.default = unless;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":3,"column":0}},{"generated":{"line":37,"column":0},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":0}},{"name":"unless","generated":{"line":37,"column":4},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":4}},{"generated":{"line":37,"column":13},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":13}},{"generated":{"line":37,"column":26},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":26}},{"generated":{"line":37,"column":47},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":34}},{"name":"unless","generated":{"line":37,"column":56},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":43}},{"generated":{"line":37,"column":62},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":34}},{"name":"pred","generated":{"line":37,"column":63},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":50}},{"generated":{"line":37,"column":67},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":34}},{"name":"whenFalseFn","generated":{"line":37,"column":69},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":56}},{"generated":{"line":37,"column":80},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":34}},{"name":"x","generated":{"line":37,"column":82},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":69}},{"generated":{"line":37,"column":83},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":34}},{"generated":{"line":37,"column":85},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":72}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":2}},{"name":"pred","generated":{"line":38,"column":9},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":9}},{"name":"x","generated":{"line":38,"column":14},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":14}},{"generated":{"line":38,"column":15},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":9}},{"name":"x","generated":{"line":38,"column":19},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":19}},{"generated":{"line":38,"column":20},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":9}},{"name":"whenFalseFn","generated":{"line":38,"column":23},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":23}},{"name":"x","generated":{"line":38,"column":35},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":35}},{"generated":{"line":38,"column":36},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":23}},{"generated":{"line":38,"column":37},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":28,"column":2}},{"generated":{"line":39,"column":0},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":29,"column":1}},{"generated":{"line":39,"column":1},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":26}},{"generated":{"line":39,"column":2},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":27,"column":0}},{"name":"unless","generated":{"line":40,"column":18},"source":"..\\node_modules\\ramda\\es\\unless.js","original":{"line":30,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\unless.js":"import _curry3 from './internal/_curry3';\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */\nvar unless = /*#__PURE__*/_curry3(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\nexport default unless;"},"lineCount":null}},"hash":"d22a6eb261f3e4e096324e2d97fa394a","cacheData":{"env":{}}}