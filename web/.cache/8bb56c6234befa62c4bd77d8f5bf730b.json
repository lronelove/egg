{"id":"..\\node_modules\\ramda\\es\\test.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_cloneRegExp","loc":{"line":1,"column":25},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\test.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_cloneRegExp.js"},{"name":"./internal/_curry2","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\test.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./internal/_isRegExp","loc":{"line":3,"column":22},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\test.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_isRegExp.js"},{"name":"./toString","loc":{"line":4,"column":21},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\test.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\toString.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _cloneRegExp2 = require('./internal/_cloneRegExp');\n\nvar _cloneRegExp3 = _interopRequireDefault(_cloneRegExp2);\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _isRegExp2 = require('./internal/_isRegExp');\n\nvar _isRegExp3 = _interopRequireDefault(_isRegExp2);\n\nvar _toString = require('./toString');\n\nvar _toString2 = _interopRequireDefault(_toString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nvar test = /*#__PURE__*/(0, _curry3.default)(function test(pattern, str) {\n  if (!(0, _isRegExp3.default)(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + (0, _toString2.default)(pattern));\n  }\n  return (0, _cloneRegExp3.default)(pattern).test(str);\n});\nexports.default = test;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":4,"column":0}},{"generated":{"line":25,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":6,"column":0}},{"generated":{"line":42,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":0}},{"name":"test","generated":{"line":42,"column":4},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":4}},{"generated":{"line":42,"column":11},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":11}},{"generated":{"line":42,"column":24},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":24}},{"generated":{"line":42,"column":45},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":32}},{"name":"test","generated":{"line":42,"column":54},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":41}},{"generated":{"line":42,"column":58},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":32}},{"name":"pattern","generated":{"line":42,"column":59},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":46}},{"generated":{"line":42,"column":66},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":32}},{"name":"str","generated":{"line":42,"column":68},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":55}},{"generated":{"line":42,"column":71},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":32}},{"generated":{"line":42,"column":73},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":60}},{"generated":{"line":43,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":24,"column":2}},{"generated":{"line":43,"column":6},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":24,"column":6}},{"generated":{"line":43,"column":7},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":24,"column":7}},{"name":"pattern","generated":{"line":43,"column":31},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":24,"column":17}},{"generated":{"line":43,"column":38},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":24,"column":7}},{"generated":{"line":43,"column":39},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":24,"column":2}},{"generated":{"line":43,"column":41},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":24,"column":27}},{"generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":4}},{"generated":{"line":44,"column":10},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":10}},{"name":"TypeError","generated":{"line":44,"column":14},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":14}},{"generated":{"line":44,"column":23},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":10}},{"generated":{"line":44,"column":24},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":24}},{"generated":{"line":44,"column":100},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":100}},{"name":"pattern","generated":{"line":44,"column":124},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":109}},{"generated":{"line":44,"column":131},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":100}},{"generated":{"line":44,"column":132},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":10}},{"generated":{"line":44,"column":133},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":25,"column":4}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":26,"column":3}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":2}},{"generated":{"line":46,"column":9},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":9}},{"name":"pattern","generated":{"line":46,"column":36},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":22}},{"generated":{"line":46,"column":43},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":9}},{"name":"test","generated":{"line":46,"column":45},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":31}},{"generated":{"line":46,"column":49},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":9}},{"name":"str","generated":{"line":46,"column":50},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":36}},{"generated":{"line":46,"column":53},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":9}},{"generated":{"line":46,"column":54},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":27,"column":2}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":28,"column":1}},{"generated":{"line":47,"column":1},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":24}},{"generated":{"line":47,"column":2},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":23,"column":0}},{"name":"test","generated":{"line":48,"column":18},"source":"..\\node_modules\\ramda\\es\\test.js","original":{"line":29,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\test.js":"import _cloneRegExp from './internal/_cloneRegExp';\nimport _curry2 from './internal/_curry2';\nimport _isRegExp from './internal/_isRegExp';\nimport toString from './toString';\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nvar test = /*#__PURE__*/_curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\nexport default test;"},"lineCount":null}},"hash":"ad8dd5212e56ad6a449df68a07de6b3b","cacheData":{"env":{}}}