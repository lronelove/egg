{"id":"..\\node_modules\\ramda\\es\\intersection.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./internal/_contains","loc":{"line":1,"column":22},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\intersection.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_contains.js"},{"name":"./internal/_curry2","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\intersection.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./internal/_filter","loc":{"line":3,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\intersection.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_filter.js"},{"name":"./flip","loc":{"line":4,"column":17},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\intersection.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\flip.js"},{"name":"./uniq","loc":{"line":5,"column":17},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\intersection.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\uniq.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _contains2 = require('./internal/_contains');\n\nvar _contains3 = _interopRequireDefault(_contains2);\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _filter2 = require('./internal/_filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _flip = require('./flip');\n\nvar _flip2 = _interopRequireDefault(_flip);\n\nvar _uniq = require('./uniq');\n\nvar _uniq2 = _interopRequireDefault(_uniq);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nvar intersection = /*#__PURE__*/(0, _curry3.default)(function intersection(list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  return (0, _uniq2.default)((0, _filter3.default)((0, _flip2.default)(_contains3.default)(lookupList), filteredList));\n});\nexports.default = intersection;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":4,"column":0}},{"generated":{"line":23,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":5,"column":0}},{"generated":{"line":29,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":7,"column":0}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":0}},{"name":"intersection","generated":{"line":46,"column":4},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":4}},{"generated":{"line":46,"column":19},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":19}},{"generated":{"line":46,"column":32},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":32}},{"generated":{"line":46,"column":53},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":40}},{"name":"intersection","generated":{"line":46,"column":62},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":49}},{"generated":{"line":46,"column":74},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":40}},{"name":"list1","generated":{"line":46,"column":75},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":62}},{"generated":{"line":46,"column":80},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":40}},{"name":"list2","generated":{"line":46,"column":82},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":69}},{"generated":{"line":46,"column":87},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":40}},{"generated":{"line":46,"column":89},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":76}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":25,"column":2}},{"name":"lookupList","generated":{"line":47,"column":6},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":25,"column":6}},{"generated":{"line":47,"column":16},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":25,"column":2}},{"name":"filteredList","generated":{"line":47,"column":18},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":25,"column":18}},{"generated":{"line":47,"column":30},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":25,"column":2}},{"generated":{"line":48,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":2}},{"name":"list1","generated":{"line":48,"column":6},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":6}},{"name":"length","generated":{"line":48,"column":12},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":12}},{"generated":{"line":48,"column":18},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":6}},{"name":"list2","generated":{"line":48,"column":21},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":21}},{"name":"length","generated":{"line":48,"column":27},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":27}},{"generated":{"line":48,"column":33},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":2}},{"generated":{"line":48,"column":35},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":35}},{"name":"lookupList","generated":{"line":49,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":27,"column":4}},{"name":"list1","generated":{"line":49,"column":17},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":27,"column":17}},{"generated":{"line":49,"column":22},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":27,"column":4}},{"name":"filteredList","generated":{"line":50,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":28,"column":4}},{"name":"list2","generated":{"line":50,"column":19},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":28,"column":19}},{"generated":{"line":50,"column":24},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":28,"column":4}},{"generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":29,"column":3}},{"generated":{"line":51,"column":3},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":26,"column":2}},{"generated":{"line":51,"column":9},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":29,"column":9}},{"name":"lookupList","generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":30,"column":4}},{"name":"list2","generated":{"line":52,"column":17},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":30,"column":17}},{"generated":{"line":52,"column":22},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":30,"column":4}},{"name":"filteredList","generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":31,"column":4}},{"name":"list1","generated":{"line":53,"column":19},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":31,"column":19}},{"generated":{"line":53,"column":24},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":31,"column":4}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":32,"column":3}},{"generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":2}},{"generated":{"line":55,"column":9},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":9}},{"generated":{"line":55,"column":29},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":14}},{"generated":{"line":55,"column":51},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":22}},{"name":"_contains","generated":{"line":55,"column":71},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":27}},{"generated":{"line":55,"column":89},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":22}},{"name":"lookupList","generated":{"line":55,"column":91},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":38}},{"generated":{"line":55,"column":101},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":22}},{"generated":{"line":55,"column":102},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":14}},{"name":"filteredList","generated":{"line":55,"column":104},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":51}},{"generated":{"line":55,"column":116},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":14}},{"generated":{"line":55,"column":117},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":9}},{"generated":{"line":55,"column":118},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":33,"column":2}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":34,"column":1}},{"generated":{"line":56,"column":1},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":32}},{"generated":{"line":56,"column":2},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":24,"column":0}},{"name":"intersection","generated":{"line":57,"column":18},"source":"..\\node_modules\\ramda\\es\\intersection.js","original":{"line":35,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\intersection.js":"import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\nimport _filter from './internal/_filter';\nimport flip from './flip';\nimport uniq from './uniq';\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nvar intersection = /*#__PURE__*/_curry2(function intersection(list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  return uniq(_filter(flip(_contains)(lookupList), filteredList));\n});\nexport default intersection;"},"lineCount":null}},"hash":"4705302d8307ac90e84747b27022b551","cacheData":{"env":{}}}