{"id":"..\\node_modules\\ramda\\es\\pipe.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_arity","loc":{"line":1,"column":19},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\pipe.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_arity.js"},{"name":"./internal/_pipe","loc":{"line":2,"column":18},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\pipe.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_pipe.js"},{"name":"./reduce","loc":{"line":3,"column":19},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\pipe.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\reduce.js"},{"name":"./tail","loc":{"line":4,"column":17},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\pipe.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\tail.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pipe;\n\nvar _arity2 = require('./internal/_arity');\n\nvar _arity3 = _interopRequireDefault(_arity2);\n\nvar _pipe2 = require('./internal/_pipe');\n\nvar _pipe3 = _interopRequireDefault(_pipe2);\n\nvar _reduce = require('./reduce');\n\nvar _reduce2 = _interopRequireDefault(_reduce);\n\nvar _tail = require('./tail');\n\nvar _tail2 = _interopRequireDefault(_tail);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return (0, _arity3.default)(arguments[0].length, (0, _reduce2.default)(_pipe3.default, arguments[0], (0, _tail2.default)(arguments)));\n}","map":{"mappings":[{"name":"pipe","generated":{"line":6,"column":18},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":29,"column":24}},{"generated":{"line":8,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":2,"column":0}},{"generated":{"line":16,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":3,"column":0}},{"generated":{"line":20,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":4,"column":0}},{"generated":{"line":26,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":6,"column":0}},{"generated":{"line":49,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":29,"column":15}},{"name":"pipe","generated":{"line":49,"column":9},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":29,"column":24}},{"generated":{"line":49,"column":13},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":29,"column":15}},{"generated":{"line":49,"column":16},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":29,"column":31}},{"generated":{"line":50,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":30,"column":2}},{"name":"arguments","generated":{"line":50,"column":6},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":30,"column":6}},{"name":"length","generated":{"line":50,"column":16},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":30,"column":16}},{"generated":{"line":50,"column":22},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":30,"column":6}},{"generated":{"line":50,"column":27},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":30,"column":27}},{"generated":{"line":50,"column":28},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":30,"column":2}},{"generated":{"line":50,"column":30},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":30,"column":30}},{"generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":31,"column":4}},{"generated":{"line":51,"column":10},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":31,"column":10}},{"name":"Error","generated":{"line":51,"column":14},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":31,"column":14}},{"generated":{"line":51,"column":19},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":31,"column":10}},{"generated":{"line":51,"column":20},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":31,"column":20}},{"generated":{"line":51,"column":57},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":31,"column":10}},{"generated":{"line":51,"column":58},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":31,"column":4}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":32,"column":3}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":2}},{"generated":{"line":53,"column":9},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":9}},{"name":"arguments","generated":{"line":53,"column":30},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":16}},{"generated":{"line":53,"column":40},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":26}},{"generated":{"line":53,"column":41},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":16}},{"name":"length","generated":{"line":53,"column":43},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":29}},{"generated":{"line":53,"column":49},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":9}},{"generated":{"line":53,"column":51},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":37}},{"name":"_pipe","generated":{"line":53,"column":73},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":44}},{"generated":{"line":53,"column":87},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":37}},{"name":"arguments","generated":{"line":53,"column":89},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":51}},{"generated":{"line":53,"column":99},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":61}},{"generated":{"line":53,"column":100},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":51}},{"generated":{"line":53,"column":101},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":37}},{"generated":{"line":53,"column":103},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":65}},{"name":"arguments","generated":{"line":53,"column":123},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":70}},{"generated":{"line":53,"column":132},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":65}},{"generated":{"line":53,"column":133},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":37}},{"generated":{"line":53,"column":134},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":9}},{"generated":{"line":53,"column":135},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":33,"column":2}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\pipe.js","original":{"line":34,"column":1}}],"sources":{"..\\node_modules\\ramda\\es\\pipe.js":"import _arity from './internal/_arity';\nimport _pipe from './internal/_pipe';\nimport reduce from './reduce';\nimport tail from './tail';\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nexport default function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}"},"lineCount":null}},"hash":"6d849cddaa193dd08a9e0c906e1b4d5c","cacheData":{"env":{}}}