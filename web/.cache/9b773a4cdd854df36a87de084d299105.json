{"id":"..\\node_modules\\ramda\\es\\modulo.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\modulo.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry2.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      var isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nvar modulo = /*#__PURE__*/(0, _curry3.default)(function modulo(a, b) {\n  return a % b;\n});\nexports.default = modulo;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":3,"column":0}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":0}},{"name":"modulo","generated":{"line":38,"column":4},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":4}},{"generated":{"line":38,"column":13},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":13}},{"generated":{"line":38,"column":26},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":26}},{"generated":{"line":38,"column":47},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":34}},{"name":"modulo","generated":{"line":38,"column":56},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":43}},{"generated":{"line":38,"column":62},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":34}},{"name":"a","generated":{"line":38,"column":63},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":50}},{"generated":{"line":38,"column":64},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":34}},{"name":"b","generated":{"line":38,"column":66},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":53}},{"generated":{"line":38,"column":67},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":34}},{"generated":{"line":38,"column":69},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":56}},{"generated":{"line":39,"column":0},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":29,"column":2}},{"name":"a","generated":{"line":39,"column":9},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":29,"column":9}},{"name":"b","generated":{"line":39,"column":13},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":29,"column":13}},{"generated":{"line":39,"column":14},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":29,"column":2}},{"generated":{"line":40,"column":0},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":30,"column":1}},{"generated":{"line":40,"column":1},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":26}},{"generated":{"line":40,"column":2},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":28,"column":0}},{"name":"modulo","generated":{"line":41,"column":18},"source":"..\\node_modules\\ramda\\es\\modulo.js","original":{"line":31,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\modulo.js":"import _curry2 from './internal/_curry2';\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      var isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nvar modulo = /*#__PURE__*/_curry2(function modulo(a, b) {\n  return a % b;\n});\nexport default modulo;"},"lineCount":null}},"hash":"dfb1b396d7fa91b5fb62b33266bf4efd","cacheData":{"env":{}}}