{"id":"..\\node_modules\\ramda\\es\\mapAccum.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\mapAccum.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry3.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nvar mapAccum = /*#__PURE__*/(0, _curry2.default)(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\nexports.default = mapAccum;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":3,"column":0}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":0}},{"name":"mapAccum","generated":{"line":47,"column":4},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":4}},{"generated":{"line":47,"column":15},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":15}},{"generated":{"line":47,"column":28},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":28}},{"generated":{"line":47,"column":49},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":36}},{"name":"mapAccum","generated":{"line":47,"column":58},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":45}},{"generated":{"line":47,"column":66},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":36}},{"name":"fn","generated":{"line":47,"column":67},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":54}},{"generated":{"line":47,"column":69},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":36}},{"name":"acc","generated":{"line":47,"column":71},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":58}},{"generated":{"line":47,"column":74},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":36}},{"name":"list","generated":{"line":47,"column":76},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":63}},{"generated":{"line":47,"column":80},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":36}},{"generated":{"line":47,"column":82},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":69}},{"generated":{"line":48,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":38,"column":2}},{"name":"idx","generated":{"line":48,"column":6},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":38,"column":6}},{"generated":{"line":48,"column":12},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":38,"column":12}},{"generated":{"line":48,"column":13},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":38,"column":2}},{"generated":{"line":49,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":39,"column":2}},{"name":"len","generated":{"line":49,"column":6},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":39,"column":6}},{"name":"list","generated":{"line":49,"column":12},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":39,"column":12}},{"name":"length","generated":{"line":49,"column":17},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":39,"column":17}},{"generated":{"line":49,"column":23},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":39,"column":2}},{"generated":{"line":50,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":40,"column":2}},{"name":"result","generated":{"line":50,"column":6},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":40,"column":6}},{"generated":{"line":50,"column":15},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":40,"column":15}},{"generated":{"line":50,"column":17},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":40,"column":2}},{"generated":{"line":51,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":41,"column":2}},{"name":"tuple","generated":{"line":51,"column":6},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":41,"column":6}},{"generated":{"line":51,"column":14},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":41,"column":14}},{"name":"acc","generated":{"line":51,"column":15},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":41,"column":15}},{"generated":{"line":51,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":41,"column":14}},{"generated":{"line":51,"column":19},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":41,"column":2}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":42,"column":2}},{"name":"idx","generated":{"line":52,"column":9},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":42,"column":9}},{"name":"len","generated":{"line":52,"column":15},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":42,"column":15}},{"generated":{"line":52,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":42,"column":2}},{"generated":{"line":52,"column":20},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":42,"column":20}},{"name":"tuple","generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":4}},{"name":"fn","generated":{"line":53,"column":12},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":12}},{"name":"tuple","generated":{"line":53,"column":15},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":15}},{"generated":{"line":53,"column":21},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":21}},{"generated":{"line":53,"column":22},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":15}},{"generated":{"line":53,"column":23},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":12}},{"name":"list","generated":{"line":53,"column":25},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":25}},{"name":"idx","generated":{"line":53,"column":30},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":30}},{"generated":{"line":53,"column":33},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":25}},{"generated":{"line":53,"column":34},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":12}},{"generated":{"line":53,"column":35},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":43,"column":4}},{"name":"result","generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":44,"column":4}},{"name":"idx","generated":{"line":54,"column":11},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":44,"column":11}},{"generated":{"line":54,"column":14},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":44,"column":4}},{"name":"tuple","generated":{"line":54,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":44,"column":18}},{"generated":{"line":54,"column":24},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":44,"column":24}},{"generated":{"line":54,"column":25},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":44,"column":18}},{"generated":{"line":54,"column":26},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":44,"column":4}},{"name":"idx","generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":45,"column":4}},{"generated":{"line":55,"column":11},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":45,"column":11}},{"generated":{"line":55,"column":12},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":45,"column":4}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":46,"column":3}},{"generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":2}},{"generated":{"line":57,"column":9},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":9}},{"name":"tuple","generated":{"line":57,"column":10},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":10}},{"generated":{"line":57,"column":16},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":16}},{"generated":{"line":57,"column":17},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":10}},{"generated":{"line":57,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":9}},{"name":"result","generated":{"line":57,"column":20},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":20}},{"generated":{"line":57,"column":26},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":9}},{"generated":{"line":57,"column":27},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":47,"column":2}},{"generated":{"line":58,"column":0},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":48,"column":1}},{"generated":{"line":58,"column":1},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":28}},{"generated":{"line":58,"column":2},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":37,"column":0}},{"name":"mapAccum","generated":{"line":59,"column":18},"source":"..\\node_modules\\ramda\\es\\mapAccum.js","original":{"line":49,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\mapAccum.js":"import _curry3 from './internal/_curry3';\n\n/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nvar mapAccum = /*#__PURE__*/_curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\nexport default mapAccum;"},"lineCount":null}},"hash":"882e06ef68d3c7a29f264fdf87a0305b","cacheData":{"env":{}}}