{"id":"..\\node_modules\\ramda\\es\\toString.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./internal/_curry1","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\toString.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry1.js"},{"name":"./internal/_toString","loc":{"line":2,"column":22},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\toString.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_toString.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry1');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _toString2 = require('./internal/_toString');\n\nvar _toString3 = _interopRequireDefault(_toString2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString = /*#__PURE__*/(0, _curry2.default)(function toString(val) {\n  return (0, _toString3.default)(val, []);\n});\nexports.default = toString;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":4,"column":0}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":0}},{"name":"toString","generated":{"line":53,"column":4},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":4}},{"generated":{"line":53,"column":15},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":15}},{"generated":{"line":53,"column":28},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":28}},{"generated":{"line":53,"column":49},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":36}},{"name":"toString","generated":{"line":53,"column":58},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":45}},{"generated":{"line":53,"column":66},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":36}},{"name":"val","generated":{"line":53,"column":67},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":54}},{"generated":{"line":53,"column":70},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":36}},{"generated":{"line":53,"column":72},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":59}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":41,"column":2}},{"generated":{"line":54,"column":9},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":41,"column":9}},{"name":"val","generated":{"line":54,"column":33},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":41,"column":19}},{"generated":{"line":54,"column":36},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":41,"column":9}},{"generated":{"line":54,"column":38},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":41,"column":24}},{"generated":{"line":54,"column":40},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":41,"column":9}},{"generated":{"line":54,"column":41},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":41,"column":2}},{"generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":42,"column":1}},{"generated":{"line":55,"column":1},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":28}},{"generated":{"line":55,"column":2},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":40,"column":0}},{"name":"toString","generated":{"line":56,"column":18},"source":"..\\node_modules\\ramda\\es\\toString.js","original":{"line":43,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\toString.js":"import _curry1 from './internal/_curry1';\nimport _toString from './internal/_toString';\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString = /*#__PURE__*/_curry1(function toString(val) {\n  return _toString(val, []);\n});\nexport default toString;"},"lineCount":null}},"hash":"d0ea81d079586d449561f8aab9caa2f5","cacheData":{"env":{}}}