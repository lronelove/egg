{"id":"..\\node_modules\\ramda\\es\\binary.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_curry1","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\binary.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry1.js"},{"name":"./nAry","loc":{"line":2,"column":17},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\binary.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\nAry.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry1');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _nAry = require('./nAry');\n\nvar _nAry2 = _interopRequireDefault(_nAry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = /*#__PURE__*/(0, _curry2.default)(function binary(fn) {\n  return (0, _nAry2.default)(2, fn);\n});\nexports.default = binary;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":4,"column":0}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":0}},{"name":"binary","generated":{"line":45,"column":4},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":4}},{"generated":{"line":45,"column":13},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":13}},{"generated":{"line":45,"column":26},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":26}},{"generated":{"line":45,"column":47},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":34}},{"name":"binary","generated":{"line":45,"column":56},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":43}},{"generated":{"line":45,"column":62},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":34}},{"name":"fn","generated":{"line":45,"column":63},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":50}},{"generated":{"line":45,"column":65},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":34}},{"generated":{"line":45,"column":67},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":54}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":33,"column":2}},{"generated":{"line":46,"column":9},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":33,"column":9}},{"generated":{"line":46,"column":29},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":33,"column":14}},{"generated":{"line":46,"column":30},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":33,"column":9}},{"name":"fn","generated":{"line":46,"column":32},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":33,"column":17}},{"generated":{"line":46,"column":34},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":33,"column":9}},{"generated":{"line":46,"column":35},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":33,"column":2}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":34,"column":1}},{"generated":{"line":47,"column":1},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":26}},{"generated":{"line":47,"column":2},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":32,"column":0}},{"name":"binary","generated":{"line":48,"column":18},"source":"..\\node_modules\\ramda\\es\\binary.js","original":{"line":35,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\binary.js":"import _curry1 from './internal/_curry1';\nimport nAry from './nAry';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = /*#__PURE__*/_curry1(function binary(fn) {\n  return nAry(2, fn);\n});\nexport default binary;"},"lineCount":null}},"hash":"428918d8ee88082d2a8ba9208bc9c015","cacheData":{"env":{}}}