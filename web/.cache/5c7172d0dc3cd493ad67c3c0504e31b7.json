{"id":"..\\node_modules\\ramda\\es\\type.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry1","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\type.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry1.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry1');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(undefined); //=> \"Undefined\"\n */\nvar type = /*#__PURE__*/(0, _curry2.default)(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\nexports.default = type;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":3,"column":0}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":0}},{"name":"type","generated":{"line":38,"column":4},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":4}},{"generated":{"line":38,"column":11},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":11}},{"generated":{"line":38,"column":24},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":24}},{"generated":{"line":38,"column":45},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":32}},{"name":"type","generated":{"line":38,"column":54},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":41}},{"generated":{"line":38,"column":58},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":32}},{"name":"val","generated":{"line":38,"column":59},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":46}},{"generated":{"line":38,"column":62},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":32}},{"generated":{"line":38,"column":64},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":51}},{"generated":{"line":39,"column":0},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":2}},{"name":"val","generated":{"line":39,"column":9},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":9}},{"generated":{"line":39,"column":17},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":17}},{"generated":{"line":39,"column":21},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":9}},{"generated":{"line":39,"column":24},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":24}},{"generated":{"line":39,"column":30},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":9}},{"name":"val","generated":{"line":39,"column":33},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":33}},{"name":"undefined","generated":{"line":39,"column":41},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":41}},{"generated":{"line":39,"column":50},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":33}},{"generated":{"line":39,"column":53},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":53}},{"generated":{"line":39,"column":64},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":33}},{"name":"Object","generated":{"line":39,"column":67},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":67}},{"name":"prototype","generated":{"line":39,"column":74},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":74}},{"generated":{"line":39,"column":83},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":67}},{"name":"toString","generated":{"line":39,"column":84},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":84}},{"generated":{"line":39,"column":92},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":67}},{"name":"call","generated":{"line":39,"column":93},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":93}},{"generated":{"line":39,"column":97},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":67}},{"name":"val","generated":{"line":39,"column":98},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":98}},{"generated":{"line":39,"column":101},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":67}},{"name":"slice","generated":{"line":39,"column":103},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":103}},{"generated":{"line":39,"column":108},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":67}},{"generated":{"line":39,"column":109},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":109}},{"generated":{"line":39,"column":110},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":67}},{"generated":{"line":39,"column":112},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":112}},{"generated":{"line":39,"column":113},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":113}},{"generated":{"line":39,"column":114},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":67}},{"generated":{"line":39,"column":115},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":29,"column":2}},{"generated":{"line":40,"column":0},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":30,"column":1}},{"generated":{"line":40,"column":1},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":24}},{"generated":{"line":40,"column":2},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":28,"column":0}},{"name":"type","generated":{"line":41,"column":18},"source":"..\\node_modules\\ramda\\es\\type.js","original":{"line":31,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\type.js":"import _curry1 from './internal/_curry1';\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(undefined); //=> \"Undefined\"\n */\nvar type = /*#__PURE__*/_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\nexport default type;"},"lineCount":null}},"hash":"545c46856833a20ad398d89d3195c34a","cacheData":{"env":{}}}