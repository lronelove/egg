{"id":"..\\node_modules\\ramda\\es\\transduce.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_reduce","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\transduce.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_reduce.js"},{"name":"./internal/_xwrap","loc":{"line":2,"column":19},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\transduce.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_xwrap.js"},{"name":"./curryN","loc":{"line":3,"column":19},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\transduce.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\curryN.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reduce2 = require('./internal/_reduce');\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _xwrap2 = require('./internal/_xwrap');\n\nvar _xwrap3 = _interopRequireDefault(_xwrap2);\n\nvar _curryN = require('./curryN');\n\nvar _curryN2 = _interopRequireDefault(_curryN);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      var isOdd = (x) => x % 2 === 1;\n *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nvar transduce = /*#__PURE__*/(0, _curryN2.default)(4, function transduce(xf, fn, acc, list) {\n  return (0, _reduce3.default)(xf(typeof fn === 'function' ? (0, _xwrap3.default)(fn) : fn), acc, list);\n});\nexports.default = transduce;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":5,"column":0}},{"generated":{"line":68,"column":0},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":0}},{"name":"transduce","generated":{"line":68,"column":4},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":4}},{"generated":{"line":68,"column":16},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":16}},{"generated":{"line":68,"column":29},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":29}},{"generated":{"line":68,"column":51},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":36}},{"generated":{"line":68,"column":52},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":29}},{"generated":{"line":68,"column":54},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":39}},{"name":"transduce","generated":{"line":68,"column":63},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":48}},{"generated":{"line":68,"column":72},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":39}},{"name":"xf","generated":{"line":68,"column":73},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":58}},{"generated":{"line":68,"column":75},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":39}},{"name":"fn","generated":{"line":68,"column":77},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":62}},{"generated":{"line":68,"column":79},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":39}},{"name":"acc","generated":{"line":68,"column":81},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":66}},{"generated":{"line":68,"column":84},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":39}},{"name":"list","generated":{"line":68,"column":86},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":71}},{"generated":{"line":68,"column":90},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":39}},{"generated":{"line":68,"column":92},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":77}},{"generated":{"line":69,"column":0},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":2}},{"generated":{"line":69,"column":9},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":9}},{"name":"xf","generated":{"line":69,"column":31},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":17}},{"generated":{"line":69,"column":34},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":20}},{"name":"fn","generated":{"line":69,"column":41},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":27}},{"generated":{"line":69,"column":43},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":20}},{"generated":{"line":69,"column":48},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":34}},{"generated":{"line":69,"column":58},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":20}},{"generated":{"line":69,"column":61},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":47}},{"name":"fn","generated":{"line":69,"column":82},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":54}},{"generated":{"line":69,"column":84},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":47}},{"generated":{"line":69,"column":85},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":20}},{"name":"fn","generated":{"line":69,"column":88},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":60}},{"generated":{"line":69,"column":90},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":17}},{"generated":{"line":69,"column":91},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":9}},{"name":"acc","generated":{"line":69,"column":93},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":65}},{"generated":{"line":69,"column":96},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":9}},{"name":"list","generated":{"line":69,"column":98},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":70}},{"generated":{"line":69,"column":102},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":9}},{"generated":{"line":69,"column":103},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":53,"column":2}},{"generated":{"line":70,"column":0},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":54,"column":1}},{"generated":{"line":70,"column":1},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":29}},{"generated":{"line":70,"column":2},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":52,"column":0}},{"name":"transduce","generated":{"line":71,"column":18},"source":"..\\node_modules\\ramda\\es\\transduce.js","original":{"line":55,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\transduce.js":"import _reduce from './internal/_reduce';\nimport _xwrap from './internal/_xwrap';\nimport curryN from './curryN';\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      var isOdd = (x) => x % 2 === 1;\n *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nvar transduce = /*#__PURE__*/curryN(4, function transduce(xf, fn, acc, list) {\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\nexport default transduce;"},"lineCount":null}},"hash":"f5c00e032b04d2ee71d85ae7f84cc7c8","cacheData":{"env":{}}}