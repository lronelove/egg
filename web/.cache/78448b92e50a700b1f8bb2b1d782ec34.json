{"id":"..\\node_modules\\ramda\\es\\not.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry1","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\not.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry1.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry1');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nvar not = /*#__PURE__*/(0, _curry2.default)(function not(a) {\n  return !a;\n});\nexports.default = not;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":3,"column":0}},{"generated":{"line":32,"column":0},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":0}},{"name":"not","generated":{"line":32,"column":4},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":4}},{"generated":{"line":32,"column":10},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":10}},{"generated":{"line":32,"column":23},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":23}},{"generated":{"line":32,"column":44},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":31}},{"name":"not","generated":{"line":32,"column":53},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":40}},{"generated":{"line":32,"column":56},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":31}},{"name":"a","generated":{"line":32,"column":57},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":44}},{"generated":{"line":32,"column":58},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":31}},{"generated":{"line":32,"column":60},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":47}},{"generated":{"line":33,"column":0},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":23,"column":2}},{"generated":{"line":33,"column":9},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":23,"column":9}},{"name":"a","generated":{"line":33,"column":10},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":23,"column":10}},{"generated":{"line":33,"column":11},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":23,"column":2}},{"generated":{"line":34,"column":0},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":24,"column":1}},{"generated":{"line":34,"column":1},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":23}},{"generated":{"line":34,"column":2},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":22,"column":0}},{"name":"not","generated":{"line":35,"column":18},"source":"..\\node_modules\\ramda\\es\\not.js","original":{"line":25,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\not.js":"import _curry1 from './internal/_curry1';\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nvar not = /*#__PURE__*/_curry1(function not(a) {\n  return !a;\n});\nexport default not;"},"lineCount":null}},"hash":"915926cf76ff79dbdc6cc83c9b5563fb","cacheData":{"env":{}}}