{"id":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry3.js"},{"name":"./concat","loc":{"line":2,"column":19},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\concat.js"},{"name":"./differenceWith","loc":{"line":3,"column":27},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\differenceWith.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _concat = require('./concat');\n\nvar _concat2 = _interopRequireDefault(_concat);\n\nvar _differenceWith = require('./differenceWith');\n\nvar _differenceWith2 = _interopRequireDefault(_differenceWith);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      var eqA = R.eqBy(R.prop('a'));\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nvar symmetricDifferenceWith = /*#__PURE__*/(0, _curry2.default)(function symmetricDifferenceWith(pred, list1, list2) {\n  return (0, _concat2.default)((0, _differenceWith2.default)(pred, list1, list2), (0, _differenceWith2.default)(pred, list2, list1));\n});\nexports.default = symmetricDifferenceWith;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":5,"column":0}},{"generated":{"line":43,"column":0},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":0}},{"name":"symmetricDifferenceWith","generated":{"line":43,"column":4},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":4}},{"generated":{"line":43,"column":30},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":30}},{"generated":{"line":43,"column":43},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":43}},{"generated":{"line":43,"column":64},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":51}},{"name":"symmetricDifferenceWith","generated":{"line":43,"column":73},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":60}},{"generated":{"line":43,"column":96},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":51}},{"name":"pred","generated":{"line":43,"column":97},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":84}},{"generated":{"line":43,"column":101},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":51}},{"name":"list1","generated":{"line":43,"column":103},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":90}},{"generated":{"line":43,"column":108},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":51}},{"name":"list2","generated":{"line":43,"column":110},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":97}},{"generated":{"line":43,"column":115},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":51}},{"generated":{"line":43,"column":117},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":104}},{"generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":2}},{"generated":{"line":44,"column":9},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":9}},{"generated":{"line":44,"column":31},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":16}},{"name":"pred","generated":{"line":44,"column":61},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":31}},{"generated":{"line":44,"column":65},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":16}},{"name":"list1","generated":{"line":44,"column":67},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":37}},{"generated":{"line":44,"column":72},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":16}},{"name":"list2","generated":{"line":44,"column":74},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":44}},{"generated":{"line":44,"column":79},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":16}},{"generated":{"line":44,"column":80},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":9}},{"generated":{"line":44,"column":82},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":52}},{"name":"pred","generated":{"line":44,"column":112},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":67}},{"generated":{"line":44,"column":116},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":52}},{"name":"list2","generated":{"line":44,"column":118},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":73}},{"generated":{"line":44,"column":123},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":52}},{"name":"list1","generated":{"line":44,"column":125},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":80}},{"generated":{"line":44,"column":130},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":52}},{"generated":{"line":44,"column":131},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":9}},{"generated":{"line":44,"column":132},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":28,"column":2}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":29,"column":1}},{"generated":{"line":45,"column":1},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":43}},{"generated":{"line":45,"column":2},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":27,"column":0}},{"name":"symmetricDifferenceWith","generated":{"line":46,"column":18},"source":"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js","original":{"line":30,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\symmetricDifferenceWith.js":"import _curry3 from './internal/_curry3';\nimport concat from './concat';\nimport differenceWith from './differenceWith';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      var eqA = R.eqBy(R.prop('a'));\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nvar symmetricDifferenceWith = /*#__PURE__*/_curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\nexport default symmetricDifferenceWith;"},"lineCount":null}},"hash":"9e02c01400b70dda097dff3bdba58a83","cacheData":{"env":{}}}