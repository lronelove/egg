{"id":"..\\node_modules\\ramda\\es\\countBy.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./reduceBy","loc":{"line":1,"column":21},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\countBy.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\reduceBy.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reduceBy = require('./reduceBy');\n\nvar _reduceBy2 = _interopRequireDefault(_reduceBy);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nvar countBy = /*#__PURE__*/(0, _reduceBy2.default)(function (acc, elem) {\n  return acc + 1;\n}, 0);\nexports.default = countBy;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":3,"column":0}},{"generated":{"line":37,"column":0},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":0}},{"name":"countBy","generated":{"line":37,"column":4},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":4}},{"generated":{"line":37,"column":14},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":14}},{"generated":{"line":37,"column":27},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":27}},{"generated":{"line":37,"column":51},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":36}},{"name":"acc","generated":{"line":37,"column":61},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":46}},{"generated":{"line":37,"column":64},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":36}},{"name":"elem","generated":{"line":37,"column":66},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":51}},{"generated":{"line":37,"column":70},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":36}},{"generated":{"line":37,"column":72},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":57}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":28,"column":2}},{"name":"acc","generated":{"line":38,"column":9},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":28,"column":9}},{"generated":{"line":38,"column":15},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":28,"column":15}},{"generated":{"line":38,"column":16},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":28,"column":2}},{"generated":{"line":39,"column":0},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":29,"column":1}},{"generated":{"line":39,"column":1},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":27}},{"generated":{"line":39,"column":3},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":29,"column":3}},{"generated":{"line":39,"column":4},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":27}},{"generated":{"line":39,"column":5},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":27,"column":0}},{"name":"countBy","generated":{"line":40,"column":18},"source":"..\\node_modules\\ramda\\es\\countBy.js","original":{"line":30,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\countBy.js":"import reduceBy from './reduceBy';\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nvar countBy = /*#__PURE__*/reduceBy(function (acc, elem) {\n  return acc + 1;\n}, 0);\nexport default countBy;"},"lineCount":null}},"hash":"29afec4081dbbe172dba02f6cac77a62","cacheData":{"env":{}}}