{"id":"..\\node_modules\\ramda\\es\\unionWith.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_concat","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\unionWith.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_concat.js"},{"name":"./internal/_curry3","loc":{"line":2,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\unionWith.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry3.js"},{"name":"./uniqWith","loc":{"line":3,"column":21},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\unionWith.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\uniqWith.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _concat2 = require('./internal/_concat');\n\nvar _concat3 = _interopRequireDefault(_concat2);\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _uniqWith = require('./uniqWith');\n\nvar _uniqWith2 = _interopRequireDefault(_uniqWith);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      var l1 = [{a: 1}, {a: 2}];\n *      var l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = /*#__PURE__*/(0, _curry2.default)(function unionWith(pred, list1, list2) {\n  return (0, _uniqWith2.default)(pred, (0, _concat3.default)(list1, list2));\n});\nexports.default = unionWith;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":5,"column":0}},{"generated":{"line":43,"column":0},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":0}},{"name":"unionWith","generated":{"line":43,"column":4},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":4}},{"generated":{"line":43,"column":16},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":16}},{"generated":{"line":43,"column":29},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":29}},{"generated":{"line":43,"column":50},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":37}},{"name":"unionWith","generated":{"line":43,"column":59},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":46}},{"generated":{"line":43,"column":68},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":37}},{"name":"pred","generated":{"line":43,"column":69},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":56}},{"generated":{"line":43,"column":73},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":37}},{"name":"list1","generated":{"line":43,"column":75},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":62}},{"generated":{"line":43,"column":80},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":37}},{"name":"list2","generated":{"line":43,"column":82},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":69}},{"generated":{"line":43,"column":87},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":37}},{"generated":{"line":43,"column":89},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":76}},{"generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":2}},{"generated":{"line":44,"column":9},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":9}},{"name":"pred","generated":{"line":44,"column":33},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":18}},{"generated":{"line":44,"column":37},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":9}},{"generated":{"line":44,"column":39},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":24}},{"name":"list1","generated":{"line":44,"column":61},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":32}},{"generated":{"line":44,"column":66},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":24}},{"name":"list2","generated":{"line":44,"column":68},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":39}},{"generated":{"line":44,"column":73},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":24}},{"generated":{"line":44,"column":74},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":9}},{"generated":{"line":44,"column":75},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":28,"column":2}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":29,"column":1}},{"generated":{"line":45,"column":1},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":29}},{"generated":{"line":45,"column":2},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":27,"column":0}},{"name":"unionWith","generated":{"line":46,"column":18},"source":"..\\node_modules\\ramda\\es\\unionWith.js","original":{"line":30,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\unionWith.js":"import _concat from './internal/_concat';\nimport _curry3 from './internal/_curry3';\nimport uniqWith from './uniqWith';\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      var l1 = [{a: 1}, {a: 2}];\n *      var l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = /*#__PURE__*/_curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\nexport default unionWith;"},"lineCount":null}},"hash":"7da6d01a6ba14d4f9ea6a8974bcab6be","cacheData":{"env":{}}}