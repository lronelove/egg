{"id":"..\\node_modules\\ramda\\es\\minBy.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\minBy.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry3.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nvar minBy = /*#__PURE__*/(0, _curry2.default)(function minBy(f, a, b) {\n  return f(b) < f(a) ? b : a;\n});\nexports.default = minBy;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":3,"column":0}},{"generated":{"line":37,"column":0},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":0}},{"name":"minBy","generated":{"line":37,"column":4},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":4}},{"generated":{"line":37,"column":12},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":12}},{"generated":{"line":37,"column":25},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":25}},{"generated":{"line":37,"column":46},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":33}},{"name":"minBy","generated":{"line":37,"column":55},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":42}},{"generated":{"line":37,"column":60},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":33}},{"name":"f","generated":{"line":37,"column":61},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":48}},{"generated":{"line":37,"column":62},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":33}},{"name":"a","generated":{"line":37,"column":64},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":51}},{"generated":{"line":37,"column":65},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":33}},{"name":"b","generated":{"line":37,"column":67},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":54}},{"generated":{"line":37,"column":68},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":33}},{"generated":{"line":37,"column":70},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":57}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":2}},{"name":"f","generated":{"line":38,"column":9},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":9}},{"name":"b","generated":{"line":38,"column":11},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":11}},{"generated":{"line":38,"column":12},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":9}},{"name":"f","generated":{"line":38,"column":16},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":16}},{"name":"a","generated":{"line":38,"column":18},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":18}},{"generated":{"line":38,"column":19},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":16}},{"generated":{"line":38,"column":20},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":9}},{"name":"b","generated":{"line":38,"column":23},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":23}},{"generated":{"line":38,"column":24},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":9}},{"name":"a","generated":{"line":38,"column":27},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":27}},{"generated":{"line":38,"column":28},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":28,"column":2}},{"generated":{"line":39,"column":0},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":29,"column":1}},{"generated":{"line":39,"column":1},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":25}},{"generated":{"line":39,"column":2},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":27,"column":0}},{"name":"minBy","generated":{"line":40,"column":18},"source":"..\\node_modules\\ramda\\es\\minBy.js","original":{"line":30,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\minBy.js":"import _curry3 from './internal/_curry3';\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nvar minBy = /*#__PURE__*/_curry3(function minBy(f, a, b) {\n  return f(b) < f(a) ? b : a;\n});\nexport default minBy;"},"lineCount":null}},"hash":"478d2ef3cd1151f6da7df0ade3956edf","cacheData":{"env":{}}}