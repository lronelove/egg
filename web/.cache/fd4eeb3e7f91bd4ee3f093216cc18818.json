{"id":"..\\node_modules\\ramda\\es\\pluck.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_curry2","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\pluck.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./map","loc":{"line":2,"column":16},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\pluck.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\map.js"},{"name":"./prop","loc":{"line":3,"column":17},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\pluck.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\prop.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _map = require('./map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _prop = require('./prop');\n\nvar _prop2 = _interopRequireDefault(_prop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = /*#__PURE__*/(0, _curry3.default)(function pluck(p, list) {\n  return (0, _map2.default)((0, _prop2.default)(p), list);\n});\nexports.default = pluck;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":5,"column":0}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":0}},{"name":"pluck","generated":{"line":46,"column":4},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":4}},{"generated":{"line":46,"column":12},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":12}},{"generated":{"line":46,"column":25},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":25}},{"generated":{"line":46,"column":46},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":33}},{"name":"pluck","generated":{"line":46,"column":55},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":42}},{"generated":{"line":46,"column":60},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":33}},{"name":"p","generated":{"line":46,"column":61},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":48}},{"generated":{"line":46,"column":62},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":33}},{"name":"list","generated":{"line":46,"column":64},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":51}},{"generated":{"line":46,"column":68},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":33}},{"generated":{"line":46,"column":70},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":57}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":2}},{"generated":{"line":47,"column":9},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":9}},{"generated":{"line":47,"column":28},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":13}},{"name":"p","generated":{"line":47,"column":48},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":18}},{"generated":{"line":47,"column":49},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":13}},{"generated":{"line":47,"column":50},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":9}},{"name":"list","generated":{"line":47,"column":52},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":22}},{"generated":{"line":47,"column":56},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":9}},{"generated":{"line":47,"column":57},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":31,"column":2}},{"generated":{"line":48,"column":0},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":32,"column":1}},{"generated":{"line":48,"column":1},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":25}},{"generated":{"line":48,"column":2},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":30,"column":0}},{"name":"pluck","generated":{"line":49,"column":18},"source":"..\\node_modules\\ramda\\es\\pluck.js","original":{"line":33,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\pluck.js":"import _curry2 from './internal/_curry2';\nimport map from './map';\nimport prop from './prop';\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = /*#__PURE__*/_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\nexport default pluck;"},"lineCount":null}},"hash":"e46ae273cb5392122f0d3627a25bd0d2","cacheData":{"env":{}}}