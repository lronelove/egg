{"id":"..\\node_modules\\ramda\\es\\scan.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./internal/_curry3","loc":{"line":1,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\scan.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\internal\\_curry3.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry3');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nvar scan = /*#__PURE__*/(0, _curry2.default)(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n});\nexports.default = scan;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":3,"column":0}},{"generated":{"line":34,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":0}},{"name":"scan","generated":{"line":34,"column":4},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":4}},{"generated":{"line":34,"column":11},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":11}},{"generated":{"line":34,"column":24},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":24}},{"generated":{"line":34,"column":45},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":32}},{"name":"scan","generated":{"line":34,"column":54},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":41}},{"generated":{"line":34,"column":58},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":32}},{"name":"fn","generated":{"line":34,"column":59},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":46}},{"generated":{"line":34,"column":61},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":32}},{"name":"acc","generated":{"line":34,"column":63},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":50}},{"generated":{"line":34,"column":66},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":32}},{"name":"list","generated":{"line":34,"column":68},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":55}},{"generated":{"line":34,"column":72},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":32}},{"generated":{"line":34,"column":74},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":61}},{"generated":{"line":35,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":25,"column":2}},{"name":"idx","generated":{"line":35,"column":6},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":25,"column":6}},{"generated":{"line":35,"column":12},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":25,"column":12}},{"generated":{"line":35,"column":13},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":25,"column":2}},{"generated":{"line":36,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":26,"column":2}},{"name":"len","generated":{"line":36,"column":6},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":26,"column":6}},{"name":"list","generated":{"line":36,"column":12},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":26,"column":12}},{"name":"length","generated":{"line":36,"column":17},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":26,"column":17}},{"generated":{"line":36,"column":23},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":26,"column":2}},{"generated":{"line":37,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":27,"column":2}},{"name":"result","generated":{"line":37,"column":6},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":27,"column":6}},{"generated":{"line":37,"column":15},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":27,"column":15}},{"name":"acc","generated":{"line":37,"column":16},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":27,"column":16}},{"generated":{"line":37,"column":19},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":27,"column":15}},{"generated":{"line":37,"column":20},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":27,"column":2}},{"generated":{"line":38,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":28,"column":2}},{"name":"idx","generated":{"line":38,"column":9},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":28,"column":9}},{"name":"len","generated":{"line":38,"column":15},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":28,"column":15}},{"generated":{"line":38,"column":18},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":28,"column":2}},{"generated":{"line":38,"column":20},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":28,"column":20}},{"name":"acc","generated":{"line":39,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":4}},{"name":"fn","generated":{"line":39,"column":10},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":10}},{"name":"acc","generated":{"line":39,"column":13},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":13}},{"generated":{"line":39,"column":16},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":10}},{"name":"list","generated":{"line":39,"column":18},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":18}},{"name":"idx","generated":{"line":39,"column":23},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":23}},{"generated":{"line":39,"column":26},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":18}},{"generated":{"line":39,"column":27},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":10}},{"generated":{"line":39,"column":28},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":29,"column":4}},{"name":"result","generated":{"line":40,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":30,"column":4}},{"name":"idx","generated":{"line":40,"column":11},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":30,"column":11}},{"generated":{"line":40,"column":17},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":30,"column":17}},{"generated":{"line":40,"column":18},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":30,"column":4}},{"name":"acc","generated":{"line":40,"column":22},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":30,"column":22}},{"generated":{"line":40,"column":25},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":30,"column":4}},{"name":"idx","generated":{"line":41,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":31,"column":4}},{"generated":{"line":41,"column":11},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":31,"column":11}},{"generated":{"line":41,"column":12},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":31,"column":4}},{"generated":{"line":42,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":32,"column":3}},{"generated":{"line":43,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":33,"column":2}},{"name":"result","generated":{"line":43,"column":9},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":33,"column":9}},{"generated":{"line":43,"column":15},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":33,"column":2}},{"generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":34,"column":1}},{"generated":{"line":44,"column":1},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":24}},{"generated":{"line":44,"column":2},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":24,"column":0}},{"name":"scan","generated":{"line":45,"column":18},"source":"..\\node_modules\\ramda\\es\\scan.js","original":{"line":35,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\scan.js":"import _curry3 from './internal/_curry3';\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nvar scan = /*#__PURE__*/_curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n});\nexport default scan;"},"lineCount":null}},"hash":"702eddb714f0897157f8d491148c8176","cacheData":{"env":{}}}