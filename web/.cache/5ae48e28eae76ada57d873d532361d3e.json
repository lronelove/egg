{"id":"..\\node_modules\\ramda\\es\\composeP.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./pipeP","loc":{"line":1,"column":18},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\composeP.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\pipeP.js"},{"name":"./reverse","loc":{"line":2,"column":20},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\composeP.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\reverse.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = composeP;\n\nvar _pipeP = require('./pipeP');\n\nvar _pipeP2 = _interopRequireDefault(_pipeP);\n\nvar _reverse = require('./reverse');\n\nvar _reverse2 = _interopRequireDefault(_reverse);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nfunction composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return _pipeP2.default.apply(this, (0, _reverse2.default)(arguments));\n}","map":{"mappings":[{"name":"composeP","generated":{"line":6,"column":18},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":38,"column":24}},{"generated":{"line":8,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":2,"column":0}},{"generated":{"line":18,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":4,"column":0}},{"generated":{"line":52,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":38,"column":15}},{"name":"composeP","generated":{"line":52,"column":9},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":38,"column":24}},{"generated":{"line":52,"column":17},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":38,"column":15}},{"generated":{"line":52,"column":20},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":38,"column":35}},{"generated":{"line":53,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":39,"column":2}},{"name":"arguments","generated":{"line":53,"column":6},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":39,"column":6}},{"name":"length","generated":{"line":53,"column":16},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":39,"column":16}},{"generated":{"line":53,"column":22},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":39,"column":6}},{"generated":{"line":53,"column":27},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":39,"column":27}},{"generated":{"line":53,"column":28},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":39,"column":2}},{"generated":{"line":53,"column":30},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":39,"column":30}},{"generated":{"line":54,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":40,"column":4}},{"generated":{"line":54,"column":10},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":40,"column":10}},{"name":"Error","generated":{"line":54,"column":14},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":40,"column":14}},{"generated":{"line":54,"column":19},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":40,"column":10}},{"generated":{"line":54,"column":20},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":40,"column":20}},{"generated":{"line":54,"column":61},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":40,"column":10}},{"generated":{"line":54,"column":62},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":40,"column":4}},{"generated":{"line":55,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":41,"column":3}},{"generated":{"line":56,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":2}},{"name":"pipeP","generated":{"line":56,"column":9},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":9}},{"name":"apply","generated":{"line":56,"column":25},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":15}},{"generated":{"line":56,"column":30},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":9}},{"generated":{"line":56,"column":31},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":21}},{"generated":{"line":56,"column":35},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":9}},{"generated":{"line":56,"column":37},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":27}},{"name":"arguments","generated":{"line":56,"column":60},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":35}},{"generated":{"line":56,"column":69},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":27}},{"generated":{"line":56,"column":70},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":9}},{"generated":{"line":56,"column":71},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":42,"column":2}},{"generated":{"line":57,"column":0},"source":"..\\node_modules\\ramda\\es\\composeP.js","original":{"line":43,"column":1}}],"sources":{"..\\node_modules\\ramda\\es\\composeP.js":"import pipeP from './pipeP';\nimport reverse from './reverse';\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nexport default function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n}"},"lineCount":null}},"hash":"c885bdd7ab543846fd826e8c0043341b","cacheData":{"env":{}}}