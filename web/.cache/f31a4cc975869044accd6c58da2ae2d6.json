{"id":"..\\node_modules\\ramda\\es\\partial.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_concat","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\partial.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_concat.js"},{"name":"./internal/_createPartialApplicator","loc":{"line":2,"column":37},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\partial.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_createPartialApplicator.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _concat2 = require('./internal/_concat');\n\nvar _concat3 = _interopRequireDefault(_concat2);\n\nvar _createPartialApplicator2 = require('./internal/_createPartialApplicator');\n\nvar _createPartialApplicator3 = _interopRequireDefault(_createPartialApplicator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight\n * @example\n *\n *      var multiply2 = (a, b) => a * b;\n *      var double = R.partial(multiply2, [2]);\n *      double(2); //=> 4\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var sayHello = R.partial(greet, ['Hello']);\n *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nvar partial = /*#__PURE__*/(0, _createPartialApplicator3.default)(_concat3.default);\nexports.default = partial;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":4,"column":0}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":32,"column":0}},{"name":"partial","generated":{"line":45,"column":4},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":32,"column":4}},{"generated":{"line":45,"column":14},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":32,"column":14}},{"generated":{"line":45,"column":27},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":32,"column":27}},{"name":"_concat","generated":{"line":45,"column":66},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":32,"column":52}},{"generated":{"line":45,"column":82},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":32,"column":27}},{"generated":{"line":45,"column":83},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":32,"column":0}},{"name":"partial","generated":{"line":46,"column":18},"source":"..\\node_modules\\ramda\\es\\partial.js","original":{"line":33,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\partial.js":"import _concat from './internal/_concat';\nimport _createPartialApplicator from './internal/_createPartialApplicator';\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight\n * @example\n *\n *      var multiply2 = (a, b) => a * b;\n *      var double = R.partial(multiply2, [2]);\n *      double(2); //=> 4\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var sayHello = R.partial(greet, ['Hello']);\n *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nvar partial = /*#__PURE__*/_createPartialApplicator(_concat);\nexport default partial;"},"lineCount":null}},"hash":"af030e9f2ec94c109cedf01ceba12116","cacheData":{"env":{}}}