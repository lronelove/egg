{"id":"..\\node_modules\\ramda\\es\\fromPairs.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1539154142757},{"name":"./internal/_curry1","loc":{"line":1,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\fromPairs.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry1.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry1');\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nvar fromPairs = /*#__PURE__*/(0, _curry2.default)(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\nexports.default = fromPairs;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":3,"column":0}},{"generated":{"line":29,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":0}},{"name":"fromPairs","generated":{"line":29,"column":4},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":4}},{"generated":{"line":29,"column":16},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":16}},{"generated":{"line":29,"column":29},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":29}},{"generated":{"line":29,"column":50},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":37}},{"name":"fromPairs","generated":{"line":29,"column":59},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":46}},{"generated":{"line":29,"column":68},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":37}},{"name":"pairs","generated":{"line":29,"column":69},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":56}},{"generated":{"line":29,"column":74},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":37}},{"generated":{"line":29,"column":76},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":63}},{"generated":{"line":30,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":20,"column":2}},{"name":"result","generated":{"line":30,"column":6},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":20,"column":6}},{"generated":{"line":30,"column":15},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":20,"column":15}},{"generated":{"line":30,"column":17},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":20,"column":2}},{"generated":{"line":31,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":21,"column":2}},{"name":"idx","generated":{"line":31,"column":6},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":21,"column":6}},{"generated":{"line":31,"column":12},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":21,"column":12}},{"generated":{"line":31,"column":13},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":21,"column":2}},{"generated":{"line":32,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":22,"column":2}},{"name":"idx","generated":{"line":32,"column":9},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":22,"column":9}},{"name":"pairs","generated":{"line":32,"column":15},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":22,"column":15}},{"name":"length","generated":{"line":32,"column":21},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":22,"column":21}},{"generated":{"line":32,"column":27},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":22,"column":2}},{"generated":{"line":32,"column":29},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":22,"column":29}},{"name":"result","generated":{"line":33,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":4}},{"name":"pairs","generated":{"line":33,"column":11},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":11}},{"name":"idx","generated":{"line":33,"column":17},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":17}},{"generated":{"line":33,"column":20},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":11}},{"generated":{"line":33,"column":22},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":22}},{"generated":{"line":33,"column":23},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":11}},{"generated":{"line":33,"column":24},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":4}},{"name":"pairs","generated":{"line":33,"column":28},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":28}},{"name":"idx","generated":{"line":33,"column":34},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":34}},{"generated":{"line":33,"column":37},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":28}},{"generated":{"line":33,"column":39},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":39}},{"generated":{"line":33,"column":40},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":28}},{"generated":{"line":33,"column":41},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":23,"column":4}},{"name":"idx","generated":{"line":34,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":24,"column":4}},{"generated":{"line":34,"column":11},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":24,"column":11}},{"generated":{"line":34,"column":12},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":24,"column":4}},{"generated":{"line":35,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":25,"column":3}},{"generated":{"line":36,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":26,"column":2}},{"name":"result","generated":{"line":36,"column":9},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":26,"column":9}},{"generated":{"line":36,"column":15},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":26,"column":2}},{"generated":{"line":37,"column":0},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":27,"column":1}},{"generated":{"line":37,"column":1},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":29}},{"generated":{"line":37,"column":2},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":19,"column":0}},{"name":"fromPairs","generated":{"line":38,"column":18},"source":"..\\node_modules\\ramda\\es\\fromPairs.js","original":{"line":28,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\fromPairs.js":"import _curry1 from './internal/_curry1';\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nvar fromPairs = /*#__PURE__*/_curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\nexport default fromPairs;"},"lineCount":null}},"hash":"57c88f51742bb24f2a5e18f484e91217","cacheData":{"env":{}}}