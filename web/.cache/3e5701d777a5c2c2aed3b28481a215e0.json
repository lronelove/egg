{"id":"..\\node_modules\\ramda\\es\\memoize.js","dependencies":[{"name":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\work\\2018-9-29\\project\\package.json","includedInParent":true,"mtime":1538215285456},{"name":"./memoizeWith","loc":{"line":1,"column":24},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\memoize.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\memoizeWith.js"},{"name":"./toString","loc":{"line":2,"column":21},"parent":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\memoize.js","resolved":"E:\\work\\2018-9-29\\project\\node_modules\\ramda\\es\\toString.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _memoizeWith = require('./memoizeWith');\n\nvar _memoizeWith2 = _interopRequireDefault(_memoizeWith);\n\nvar _toString = require('./toString');\n\nvar _toString2 = _interopRequireDefault(_toString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a new function that, when invoked, caches the result of calling `fn`\n * for a given argument set and returns the result. Subsequent calls to the\n * memoized `fn` with the same argument set will not result in an additional\n * call to `fn`; instead, the cached result for that set of arguments will be\n * returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoizeWith\n * @deprecated since v0.25.0\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoize(n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nvar memoize = /*#__PURE__*/(0, _memoizeWith2.default)(function () {\n  return (0, _toString2.default)(arguments);\n});\nexports.default = memoize;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":4,"column":0}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":32,"column":0}},{"name":"memoize","generated":{"line":45,"column":4},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":32,"column":4}},{"generated":{"line":45,"column":14},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":32,"column":14}},{"generated":{"line":45,"column":27},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":32,"column":27}},{"generated":{"line":45,"column":54},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":32,"column":39}},{"generated":{"line":45,"column":66},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":32,"column":51}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":33,"column":2}},{"generated":{"line":46,"column":9},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":33,"column":9}},{"name":"arguments","generated":{"line":46,"column":33},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":33,"column":18}},{"generated":{"line":46,"column":42},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":33,"column":9}},{"generated":{"line":46,"column":43},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":33,"column":2}},{"generated":{"line":47,"column":0},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":34,"column":1}},{"generated":{"line":47,"column":1},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":32,"column":27}},{"generated":{"line":47,"column":2},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":32,"column":0}},{"name":"memoize","generated":{"line":48,"column":18},"source":"..\\node_modules\\ramda\\es\\memoize.js","original":{"line":35,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\memoize.js":"import memoizeWith from './memoizeWith';\nimport toString from './toString';\n\n/**\n * Creates a new function that, when invoked, caches the result of calling `fn`\n * for a given argument set and returns the result. Subsequent calls to the\n * memoized `fn` with the same argument set will not result in an additional\n * call to `fn`; instead, the cached result for that set of arguments will be\n * returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoizeWith\n * @deprecated since v0.25.0\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoize(n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nvar memoize = /*#__PURE__*/memoizeWith(function () {\n  return toString(arguments);\n});\nexport default memoize;"},"lineCount":null}},"hash":"376fae32996d95b4469413e238d85080","cacheData":{"env":{}}}