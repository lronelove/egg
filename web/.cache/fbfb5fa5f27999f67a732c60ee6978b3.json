{"id":"..\\node_modules\\ramda\\es\\without.js","dependencies":[{"name":"E:\\git\\egg\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":1507569560000},{"name":"E:\\git\\egg\\package.json","includedInParent":true,"mtime":1538296431792},{"name":"./internal/_contains","loc":{"line":1,"column":22},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\without.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_contains.js"},{"name":"./internal/_curry2","loc":{"line":2,"column":20},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\without.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./flip","loc":{"line":3,"column":17},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\without.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\flip.js"},{"name":"./reject","loc":{"line":4,"column":19},"parent":"E:\\git\\egg\\node_modules\\ramda\\es\\without.js","resolved":"E:\\git\\egg\\node_modules\\ramda\\es\\reject.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _contains2 = require('./internal/_contains');\n\nvar _contains3 = _interopRequireDefault(_contains2);\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _flip = require('./flip');\n\nvar _flip2 = _interopRequireDefault(_flip);\n\nvar _reject = require('./reject');\n\nvar _reject2 = _interopRequireDefault(_reject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nvar without = /*#__PURE__*/(0, _curry3.default)(function (xs, list) {\n  return (0, _reject2.default)((0, _flip2.default)(_contains3.default)(xs), list);\n});\nexports.default = without;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":4,"column":0}},{"generated":{"line":25,"column":0},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":6,"column":0}},{"generated":{"line":44,"column":0},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":0}},{"name":"without","generated":{"line":44,"column":4},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":4}},{"generated":{"line":44,"column":14},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":14}},{"generated":{"line":44,"column":27},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":27}},{"generated":{"line":44,"column":48},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":35}},{"name":"xs","generated":{"line":44,"column":58},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":45}},{"generated":{"line":44,"column":60},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":35}},{"name":"list","generated":{"line":44,"column":62},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":49}},{"generated":{"line":44,"column":66},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":35}},{"generated":{"line":44,"column":68},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":55}},{"generated":{"line":45,"column":0},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":2}},{"generated":{"line":45,"column":9},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":9}},{"generated":{"line":45,"column":31},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":16}},{"name":"_contains","generated":{"line":45,"column":51},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":21}},{"generated":{"line":45,"column":69},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":16}},{"name":"xs","generated":{"line":45,"column":71},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":32}},{"generated":{"line":45,"column":73},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":16}},{"generated":{"line":45,"column":74},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":9}},{"name":"list","generated":{"line":45,"column":76},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":37}},{"generated":{"line":45,"column":80},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":9}},{"generated":{"line":45,"column":81},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":26,"column":2}},{"generated":{"line":46,"column":0},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":27,"column":1}},{"generated":{"line":46,"column":1},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":27}},{"generated":{"line":46,"column":2},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":25,"column":0}},{"name":"without","generated":{"line":47,"column":18},"source":"..\\node_modules\\ramda\\es\\without.js","original":{"line":28,"column":15}}],"sources":{"..\\node_modules\\ramda\\es\\without.js":"import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\nimport flip from './flip';\nimport reject from './reject';\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nvar without = /*#__PURE__*/_curry2(function (xs, list) {\n  return reject(flip(_contains)(xs), list);\n});\nexport default without;"},"lineCount":null}},"hash":"03a233a032df6d971d441b3132002dda","cacheData":{"env":{}}}